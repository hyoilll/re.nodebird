{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dlgyd\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\re.nodebird\\\\front\\\\pages\\\\index.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useEffect } from \"react\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePost\n  } = useSelector(state => state.post); // 홈 화면이 켜지면 액션 발생\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      // 가장 맨 위에서 스크롤을 얼마나 내렸는지\n      // 키보드 커서 개념으로 생각해보자, 스크롤에서 가장 위에가 기준점\n      // 스크롤을 가장 밑으로 내려도 아직 화면 크기만크므이 공간이 남아있음\n      // 이 공간을 알기 위해 밑의 clientHeight가 필요한 것\n      // => scrollY + clientHeight = scrollHeight\n      const scrollY = window.scrollY; // 내 화면이 보이는 길이\n\n      const clientHeight = document.documentElement.clientHeight; // 가장위에서 가장 아래, 총 길이\n\n      const scrollHeight = document.documentElement.scrollHeight; // -300하느 이유는 가장 밑에 스크롤이 오기 전에 300px먼저 업데이트하기 위함\n\n      if (scrollHeight - 400 < scrollY + clientHeight) {\n        if (hasMorePost) {\n          dispatch({\n            type: LOAD_POSTS_REQUEST\n          }, []);\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      // useEffect에서 window event를 다룰 때 return문을 활용하여\n      // event를 제거해줘야 함. 안그러면 메모리에 쌓임\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePost]);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 14\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/pages/index.js"],"names":["useDispatch","useSelector","AppLayout","PostForm","PostCard","useEffect","LOAD_POSTS_REQUEST","Home","me","state","user","mainPosts","hasMorePost","post","dispatch","type","onScroll","scrollY","window","clientHeight","document","documentElement","scrollHeight","addEventListener","removeEventListener","map","id"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA6BX,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACI,IAAlB,CAA9C,CAFiB,CAIjB;;AACA,QAAMC,QAAQ,GAAGd,WAAW,EAA5B;AACAK,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAD,EAAAA,SAAS,CAAC,MAAM;AACd,aAASW,QAAT,GAAoB;AAClB;AACA;AACA;AACA;AACA;AACA,YAAMC,OAAO,GAAGC,MAAM,CAACD,OAAvB,CANkB,CAOlB;;AACA,YAAME,YAAY,GAAGC,QAAQ,CAACC,eAAT,CAAyBF,YAA9C,CARkB,CASlB;;AACA,YAAMG,YAAY,GAAGF,QAAQ,CAACC,eAAT,CAAyBC,YAA9C,CAVkB,CAYlB;;AACA,UAAIA,YAAY,GAAG,GAAf,GAAqBL,OAAO,GAAGE,YAAnC,EAAiD;AAC/C,YAAIP,WAAJ,EAAiB;AACfE,UAAAA,QAAQ,CACN;AACEC,YAAAA,IAAI,EAAET;AADR,WADM,EAIN,EAJM,CAAR;AAMD;AACF;AACF;;AACDY,IAAAA,MAAM,CAACK,gBAAP,CAAwB,QAAxB,EAAkCP,QAAlC;AACA,WAAO,MAAM;AACX;AACA;AACAE,MAAAA,MAAM,CAACM,mBAAP,CAA2B,QAA3B,EAAqCR,QAArC;AACD,KAJD;AAKD,GA/BQ,EA+BN,CAACJ,WAAD,CA/BM,CAAT;AAiCA,sBACE,QAAC,SAAD;AAAA,eAEGJ,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAFT,EAGGG,SAAS,CAACc,GAAV,CAAeZ,IAAD,iBACb,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACa,EAApB;AAAA;AAAA;AAAA;AAAA,YADD,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CAtDD;;AAwDA,eAAenB,IAAf","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport AppLayout from \"../components/AppLayout\";\r\n\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { useEffect } from \"react\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector((state) => state.user);\r\n  const { mainPosts, hasMorePost } = useSelector((state) => state.post);\r\n\r\n  // 홈 화면이 켜지면 액션 발생\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      // 가장 맨 위에서 스크롤을 얼마나 내렸는지\r\n      // 키보드 커서 개념으로 생각해보자, 스크롤에서 가장 위에가 기준점\r\n      // 스크롤을 가장 밑으로 내려도 아직 화면 크기만크므이 공간이 남아있음\r\n      // 이 공간을 알기 위해 밑의 clientHeight가 필요한 것\r\n      // => scrollY + clientHeight = scrollHeight\r\n      const scrollY = window.scrollY;\r\n      // 내 화면이 보이는 길이\r\n      const clientHeight = document.documentElement.clientHeight;\r\n      // 가장위에서 가장 아래, 총 길이\r\n      const scrollHeight = document.documentElement.scrollHeight;\r\n\r\n      // -300하느 이유는 가장 밑에 스크롤이 오기 전에 300px먼저 업데이트하기 위함\r\n      if (scrollHeight - 400 < scrollY + clientHeight) {\r\n        if (hasMorePost) {\r\n          dispatch(\r\n            {\r\n              type: LOAD_POSTS_REQUEST,\r\n            },\r\n            []\r\n          );\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      // useEffect에서 window event를 다룰 때 return문을 활용하여\r\n      // event를 제거해줘야 함. 안그러면 메모리에 쌓임\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [hasMorePost]);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {/* children */}\r\n      {me && <PostForm></PostForm>}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post}></PostCard>\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}