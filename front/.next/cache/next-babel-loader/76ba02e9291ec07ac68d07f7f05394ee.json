{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"@redux-saga/core/effects\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, REMOVE_POST_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction* addPost(action) {\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // 성공결과가 담겨있음\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data // 성공결과가 담겨있음\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\n}","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","REMOVE_POST_REQUEST","ADD_POST_TO_ME","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","err","response","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","removePost","watchAddComment","postSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,KAAd,EAAqBC,IAArB,EAA2BC,GAA3B,EAAgCC,UAAhC,QAAkD,0BAAlD;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SACEC,mBADF,EAEEC,mBAFF,EAGEC,mBAHF,EAIEC,gBAJF,EAKEC,gBALF,EAMEC,gBANF,EAOEC,mBAPF,QAQO,kBARP;AASA,SAASC,cAAT,QAA+B,kBAA/B;;AAEA,SAASC,UAAT,CAAoBC,IAApB,EAA0B;AACxB,SAAOC,KAAK,CAACC,IAAN,CAAW,cAAX,EAA2BF,IAA3B,CAAP;AACD;;AAED,UAAUG,OAAV,CAAkBC,MAAlB,EAA0B;AACxB,MAAI;AACF;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAMmB,EAAE,GAAGf,OAAO,CAACgB,QAAR,EAAX;AACA,UAAMlB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEX,gBADE;AAERI,MAAAA,IAAI,EAAE;AACJK,QAAAA,EADI;AAEJG,QAAAA,OAAO,EAAEJ,MAAM,CAACJ;AAFZ,OAFE,CAKL;;AALK,KAAD,CAAT;AAOA,UAAMZ,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAET,cADE;AAERE,MAAAA,IAAI,EAAEK;AAFE,KAAD,CAAT;AAID,GAfD,CAeE,OAAOI,GAAP,EAAY;AACZ,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEb,gBADE;AAERM,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV,IAFX,CAEiB;;AAFjB,KAAD,CAAT;AAID;AACF;;AAED,SAASW,aAAT,CAAuBX,IAAvB,EAA6B;AAC3B,SAAOC,KAAK,CAACC,IAAN,CAAY,aAAYF,IAAI,CAACY,MAAO,UAApC,EAA+CZ,IAA/C,CAAP;AACD;;AAED,UAAUa,UAAV,CAAqBT,MAArB,EAA6B;AAC3B,MAAI;AACF;AACA,UAAMlB,KAAK,CAAC,IAAD,CAAX;AACA,UAAME,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEd,mBADE;AAERO,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAFL,CAEW;;AAFX,KAAD,CAAT;AAID,GAPD,CAOE,OAAOS,GAAP,EAAY;AACZ,UAAMrB,GAAG,CAAC;AACRmB,MAAAA,IAAI,EAAEhB,mBADE;AAERS,MAAAA,IAAI,EAAES,GAAG,CAACC,QAAJ,CAAaV,IAFX,CAEiB;;AAFjB,KAAD,CAAT;AAID;AACF;;AAED,UAAUc,YAAV,GAAyB;AACvB,QAAMzB,UAAU,CAACM,gBAAD,EAAmBQ,OAAnB,CAAhB;AACD;;AAED,UAAUY,eAAV,GAA4B;AAC1B,QAAM1B,UAAU,CAACQ,mBAAD,EAAsBmB,UAAtB,CAAhB;AACD;;AAED,UAAUC,eAAV,GAA4B;AAC1B,QAAM5B,UAAU,CAACG,mBAAD,EAAsBqB,UAAtB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CAACE,IAAI,CAAC2B,YAAD,CAAL,EAAqB3B,IAAI,CAAC8B,eAAD,CAAzB,EAA4C9B,IAAI,CAAC4B,eAAD,CAAhD,CAAD,CAAT;AACD","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"@redux-saga/core/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  REMOVE_POST_REQUEST,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      }, // 성공결과가 담겨있음\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data, // 성공결과가 담겨있음\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}