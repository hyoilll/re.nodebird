{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nimport user from \"./user\";\nimport post from \"./post\";\nimport { combineReducers } from \"redux\";\nconst initialState = {\n  user: {},\n  post: {}\n}; // reducer = (이전상태, 액션) => 다음상태\n\nconst rootReducer = combineReducers({\n  index: (state = {}, action) => {\n    switch (action.type) {\n      //     case \"CHANGE_NICKNAME\":\n      //       return {\n      //         ...state,\n      //         name: action.data,\n      //       };\n      //   }\n      case HYDRATE:\n        return _objectSpread(_objectSpread({}, state), action.payload);\n\n      default:\n        return state;\n    }\n  },\n  user,\n  post\n});\nexport default rootReducer; // action 형태\n// const changeNickname = {\n//   type: \"CHANGE_NICKNAME\",\n//   data: \"boogicho\",\n// };\n// const changeNickname = {\n//   type: \"CHANGE_NICKNAME\",\n//   data: \"pika\",\n// };\n// =>\n// < action creator > : Change_nickname의 형태의 action이 많아지면 코드량도 많아지고 중복되는것이 많기 떄문에 함수로 줄인 것\n// const changeNickname = (data) => {\n//     return {\n//       type: \"CHANGE_NICKNAME\",\n//       data: data,\n//     };\n//   };\n// changeNickname(\"hyoro\");\n// action 생성 -> actino dispatch\n// store.dispatch(changeNickname('hyoro'))","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/reducers/index.js"],"names":["HYDRATE","user","post","combineReducers","initialState","rootReducer","index","state","action","type","payload"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,eAAT,QAAgC,OAAhC;AAEA,MAAMC,YAAY,GAAG;AACnBH,EAAAA,IAAI,EAAE,EADa;AAEnBC,EAAAA,IAAI,EAAE;AAFa,CAArB,C,CAKA;;AACA,MAAMG,WAAW,GAAGF,eAAe,CAAC;AAClCG,EAAAA,KAAK,EAAE,CAACC,KAAK,GAAG,EAAT,EAAaC,MAAb,KAAwB;AAC7B,YAAQA,MAAM,CAACC,IAAf;AACE;AACA;AACA;AACA;AACA;AACA;AACA,WAAKT,OAAL;AACE,+CAAYO,KAAZ,GAAsBC,MAAM,CAACE,OAA7B;;AAEF;AACE,eAAOH,KAAP;AAXJ;AAaD,GAfiC;AAgBlCN,EAAAA,IAhBkC;AAiBlCC,EAAAA;AAjBkC,CAAD,CAAnC;AAoBA,eAAeG,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nimport user from \"./user\";\r\nimport post from \"./post\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst initialState = {\r\n  user: {},\r\n  post: {},\r\n};\r\n\r\n// reducer = (이전상태, 액션) => 다음상태\r\nconst rootReducer = combineReducers({\r\n  index: (state = {}, action) => {\r\n    switch (action.type) {\r\n      //     case \"CHANGE_NICKNAME\":\r\n      //       return {\r\n      //         ...state,\r\n      //         name: action.data,\r\n      //       };\r\n      //   }\r\n      case HYDRATE:\r\n        return { ...state, ...action.payload };\r\n\r\n      default:\r\n        return state;\r\n    }\r\n  },\r\n  user,\r\n  post,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\n// action 형태\r\n// const changeNickname = {\r\n//   type: \"CHANGE_NICKNAME\",\r\n//   data: \"boogicho\",\r\n// };\r\n// const changeNickname = {\r\n//   type: \"CHANGE_NICKNAME\",\r\n//   data: \"pika\",\r\n// };\r\n\r\n// =>\r\n\r\n// < action creator > : Change_nickname의 형태의 action이 많아지면 코드량도 많아지고 중복되는것이 많기 떄문에 함수로 줄인 것\r\n// const changeNickname = (data) => {\r\n//     return {\r\n//       type: \"CHANGE_NICKNAME\",\r\n//       data: data,\r\n//     };\r\n//   };\r\n\r\n// changeNickname(\"hyoro\");\r\n\r\n// action 생성 -> actino dispatch\r\n// store.dispatch(changeNickname('hyoro'))\r\n"]},"metadata":{},"sourceType":"module"}