{"ast":null,"code":"import { all, delay, fork, put, takeLatest, call } from \"@redux-saga/core/effects\";\nimport { FOLLOW_FAILURE, FOLLOW_REQUEST, FOLLOW_SUCCESS, LOG_IN_FAILURE, LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOG_OUT_SUCCESS, SIGN_UP_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, UNFOLLOW_FAILURE, UNFOLLOW_REQUEST, UNFOLLOW_SUCCESS } from \"../reducers/user\";\nimport axios from \"axios\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/user/login\", data);\n} // action 매개변수로 로그인 정보가 들어옴\n// action.type : \"~~\"\n// action.data : data\n// loginAPI(action.data) ==> call(logInAPI, action.data)\n\n\nfunction* logIn(action) {\n  try {\n    const result = yield call(logInAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: action.data // 성공결과가 담겨있음\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      error: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: LOG_OUT_SUCCESS,\n      data: null // 성공결과가 담겨있음\n\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction signUpAPI(data) {\n  // data: { email, pw, nickName }\n  return axios.post(\"/user\", data);\n}\n\nfunction* signUp(action) {\n  try {\n    const result = yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (err) {\n    // status < 400 ~ 500 > 의 결과가 올 경우\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction followAPI() {\n  return axios.post(\"/api/follow\");\n}\n\nfunction* follow(action) {\n  try {\n    // const result = yield call(followAPI);\n    yield delay(1000);\n    yield put({\n      type: FOLLOW_SUCCESS,\n      data: action.data //post.User.id\n\n    });\n  } catch (err) {\n    yield put({\n      type: FOLLOW_FAILURE,\n      error: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction unfollowAPI() {\n  return axios.post(\"/api/unfollow\");\n}\n\nfunction* unfollow(action) {\n  try {\n    // const result = yield call(infollowAPI);\n    yield delay(1000);\n    yield put({\n      type: UNFOLLOW_SUCCESS,\n      data: action.data //post.User.id\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNFOLLOW_FAILURE,\n      error: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(LOG_IN_REQUEST, logIn); // LOG_IN 액션이 실행되면 logIn함수가 실행 , reducer와 saga가 동시에 실행됨\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\n}\n\nfunction* watchSignUp() {\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\n}\n\nfunction* watchFollow() {\n  yield takeLatest(FOLLOW_REQUEST, follow);\n}\n\nfunction* watchUnfollow() {\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow)]);\n}","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/sagas/user.js"],"names":["all","delay","fork","put","takeLatest","call","FOLLOW_FAILURE","FOLLOW_REQUEST","FOLLOW_SUCCESS","LOG_IN_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","SIGN_UP_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","UNFOLLOW_FAILURE","UNFOLLOW_REQUEST","UNFOLLOW_SUCCESS","axios","logInAPI","data","post","logIn","action","result","type","err","error","response","logOutAPI","logOut","signUpAPI","signUp","followAPI","follow","unfollowAPI","unfollow","watchLogin","watchLogOut","watchSignUp","watchFollow","watchUnfollow","userSaga"],"mappings":"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","sourcesContent":["import {\r\n  all,\r\n  delay,\r\n  fork,\r\n  put,\r\n  takeLatest,\r\n  call,\r\n} from \"@redux-saga/core/effects\";\r\nimport {\r\n  FOLLOW_FAILURE,\r\n  FOLLOW_REQUEST,\r\n  FOLLOW_SUCCESS,\r\n  LOG_IN_FAILURE,\r\n  LOG_IN_REQUEST,\r\n  LOG_IN_SUCCESS,\r\n  LOG_OUT_FAILURE,\r\n  LOG_OUT_REQUEST,\r\n  LOG_OUT_SUCCESS,\r\n  SIGN_UP_FAILURE,\r\n  SIGN_UP_REQUEST,\r\n  SIGN_UP_SUCCESS,\r\n  UNFOLLOW_FAILURE,\r\n  UNFOLLOW_REQUEST,\r\n  UNFOLLOW_SUCCESS,\r\n} from \"../reducers/user\";\r\nimport axios from \"axios\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/user/login\", data);\r\n}\r\n\r\n// action 매개변수로 로그인 정보가 들어옴\r\n// action.type : \"~~\"\r\n// action.data : data\r\n// loginAPI(action.data) ==> call(logInAPI, action.data)\r\nfunction* logIn(action) {\r\n  try {\r\n    const result = yield call(logInAPI, action.data);\r\n    yield put({\r\n      type: LOG_IN_SUCCESS,\r\n      data: action.data, // 성공결과가 담겨있음\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_IN_FAILURE,\r\n      error: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: LOG_OUT_SUCCESS,\r\n      data: null, // 성공결과가 담겨있음\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: LOG_OUT_FAILURE,\r\n      error: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction signUpAPI(data) {\r\n  // data: { email, pw, nickName }\r\n  return axios.post(\"/user\", data);\r\n}\r\n\r\nfunction* signUp(action) {\r\n  try {\r\n    const result = yield call(signUpAPI, action.data);\r\n    yield put({\r\n      type: SIGN_UP_SUCCESS,\r\n    });\r\n  } catch (err) {\r\n    // status < 400 ~ 500 > 의 결과가 올 경우\r\n    yield put({\r\n      type: SIGN_UP_FAILURE,\r\n      error: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction followAPI() {\r\n  return axios.post(\"/api/follow\");\r\n}\r\n\r\nfunction* follow(action) {\r\n  try {\r\n    // const result = yield call(followAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: FOLLOW_SUCCESS,\r\n      data: action.data, //post.User.id\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: FOLLOW_FAILURE,\r\n      error: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction unfollowAPI() {\r\n  return axios.post(\"/api/unfollow\");\r\n}\r\n\r\nfunction* unfollow(action) {\r\n  try {\r\n    // const result = yield call(infollowAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: UNFOLLOW_SUCCESS,\r\n      data: action.data, //post.User.id\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: UNFOLLOW_FAILURE,\r\n      error: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(LOG_IN_REQUEST, logIn); // LOG_IN 액션이 실행되면 logIn함수가 실행 , reducer와 saga가 동시에 실행됨\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction* watchSignUp() {\r\n  yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction* watchFollow() {\r\n  yield takeLatest(FOLLOW_REQUEST, follow);\r\n}\r\n\r\nfunction* watchUnfollow() {\r\n  yield takeLatest(UNFOLLOW_REQUEST, unfollow);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([\r\n    fork(watchLogin),\r\n    fork(watchLogOut),\r\n    fork(watchSignUp),\r\n    fork(watchFollow),\r\n    fork(watchUnfollow),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}