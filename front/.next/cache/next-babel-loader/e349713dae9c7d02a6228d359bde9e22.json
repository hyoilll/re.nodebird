{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\dlgyd\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\re.nodebird\\\\front\\\\components\\\\CommentForm.js\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { Button, Form, Input } from \"antd\";\nimport { useCallback, useEffect } from \"react\";\nimport useInput from \"../hooks/useInput\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar CommentForm = function CommentForm(_ref) {\n  _s();\n\n  var post = _ref.post;\n  var id = useSelector(function (state) {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      addCommentDone = _useSelector.addCommentDone,\n      addCommentLoading = _useSelector.addCommentLoading;\n\n  var _useInput = useInput(\"\"),\n      _useInput2 = _slicedToArray(_useInput, 3),\n      commentText = _useInput2[0],\n      onChangeCommentText = _useInput2[1],\n      setCommentText = _useInput2[2];\n\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function () {\n    console.log(post.id, commentText);\n    dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        content: commentText,\n        postId: post.id,\n        userId: id\n      }\n    });\n  }, [commentText, id]);\n  useEffect(function () {\n    if (addCommentDone) {\n      setCommentText(\"\");\n    }\n  }, [addCommentDone]);\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onFinish: onSubmitComment,\n    children: /*#__PURE__*/_jsxDEV(Form.Item, {\n      style: {\n        position: \"relative\",\n        margin: 0\n      },\n      children: [/*#__PURE__*/_jsxDEV(Input.TextArea, {\n        value: commentText,\n        onChange: onChangeCommentText,\n        rows: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Button, {\n        type: \"primary\",\n        htmlType: \"submit\",\n        style: {\n          position: \"absolute\",\n          right: 0,\n          bottom: -40,\n          zIndex: 1\n        },\n        loading: addCommentLoading,\n        children: \"submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(CommentForm, \"JrgGZAqsj9dGgSogMWNAdBvcLi0=\", false, function () {\n  return [useSelector, useSelector, useInput, useDispatch];\n});\n\n_c = CommentForm;\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"CommentForm\");","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/components/CommentForm.js"],"names":["Button","Form","Input","useCallback","useEffect","useInput","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","CommentForm","post","id","state","user","me","addCommentDone","addCommentLoading","commentText","onChangeCommentText","setCommentText","dispatch","onSubmitComment","console","log","type","data","content","postId","userId","position","margin","right","bottom","zIndex","propTypes","object","isRequired"],"mappings":";;;;;;AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,QAAuC,OAAvC;AACA,OAAOC,QAAP,MAAqB,mBAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,mBAAT,QAAoC,kBAApC;;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA;;AAAA,MAAXC,IAAW,QAAXA,IAAW;AAChC,MAAMC,EAAE,GAAGJ,WAAW,CAAC,UAACK,KAAD;AAAA;;AAAA,6BAAWA,KAAK,CAACC,IAAN,CAAWC,EAAtB,mDAAW,eAAeH,EAA1B;AAAA,GAAD,CAAtB;;AACA,qBAA8CJ,WAAW,CACvD,UAACK,KAAD;AAAA,WAAWA,KAAK,CAACF,IAAjB;AAAA,GADuD,CAAzD;AAAA,MAAQK,cAAR,gBAAQA,cAAR;AAAA,MAAwBC,iBAAxB,gBAAwBA,iBAAxB;;AAGA,kBAA2DZ,QAAQ,CAAC,EAAD,CAAnE;AAAA;AAAA,MAAOa,WAAP;AAAA,MAAoBC,mBAApB;AAAA,MAAyCC,cAAzC;;AAEA,MAAMC,QAAQ,GAAGd,WAAW,EAA5B;AAEA,MAAMe,eAAe,GAAGnB,WAAW,CAAC,YAAM;AACxCoB,IAAAA,OAAO,CAACC,GAAR,CAAYb,IAAI,CAACC,EAAjB,EAAqBM,WAArB;AACAG,IAAAA,QAAQ,CAAC;AACPI,MAAAA,IAAI,EAAEhB,mBADC;AAEPiB,MAAAA,IAAI,EAAE;AAAEC,QAAAA,OAAO,EAAET,WAAX;AAAwBU,QAAAA,MAAM,EAAEjB,IAAI,CAACC,EAArC;AAAyCiB,QAAAA,MAAM,EAAEjB;AAAjD;AAFC,KAAD,CAAR;AAID,GANkC,EAMhC,CAACM,WAAD,EAAcN,EAAd,CANgC,CAAnC;AAQAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,cAAJ,EAAoB;AAClBI,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD;AACF,GAJQ,EAIN,CAACJ,cAAD,CAJM,CAAT;AAMA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEM,eAAhB;AAAA,2BACE,QAAC,IAAD,CAAM,IAAN;AAAW,MAAA,KAAK,EAAE;AAAEQ,QAAAA,QAAQ,EAAE,UAAZ;AAAwBC,QAAAA,MAAM,EAAE;AAAhC,OAAlB;AAAA,8BACE,QAAC,KAAD,CAAO,QAAP;AACE,QAAA,KAAK,EAAEb,WADT;AAEE,QAAA,QAAQ,EAAEC,mBAFZ;AAGE,QAAA,IAAI,EAAE;AAHR;AAAA;AAAA;AAAA;AAAA,eADF,eAME,QAAC,MAAD;AACE,QAAA,IAAI,EAAC,SADP;AAEE,QAAA,QAAQ,EAAC,QAFX;AAGE,QAAA,KAAK,EAAE;AAAEW,UAAAA,QAAQ,EAAE,UAAZ;AAAwBE,UAAAA,KAAK,EAAE,CAA/B;AAAkCC,UAAAA,MAAM,EAAE,CAAC,EAA3C;AAA+CC,UAAAA,MAAM,EAAE;AAAvD,SAHT;AAIE,QAAA,OAAO,EAAEjB,iBAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eANF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAmBD,CA1CD;;GAAMP,W;UACOF,W,EACmCA,W,EAGaH,Q,EAE1CE,W;;;KAPbG,W;AA4CNA,WAAW,CAACyB,SAAZ,GAAwB;AACtBxB,EAAAA,IAAI,EAAEL,SAAS,CAAC8B,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAe3B,WAAf","sourcesContent":["import { Button, Form, Input } from \"antd\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport useInput from \"../hooks/useInput\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\r\n\r\nconst CommentForm = ({ post }) => {\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  const { addCommentDone, addCommentLoading } = useSelector(\r\n    (state) => state.post\r\n  );\r\n  const [commentText, onChangeCommentText, setCommentText] = useInput(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onSubmitComment = useCallback(() => {\r\n    console.log(post.id, commentText);\r\n    dispatch({\r\n      type: ADD_COMMENT_REQUEST,\r\n      data: { content: commentText, postId: post.id, userId: id },\r\n    });\r\n  }, [commentText, id]);\r\n\r\n  useEffect(() => {\r\n    if (addCommentDone) {\r\n      setCommentText(\"\");\r\n    }\r\n  }, [addCommentDone]);\r\n\r\n  return (\r\n    <Form onFinish={onSubmitComment}>\r\n      <Form.Item style={{ position: \"relative\", margin: 0 }}>\r\n        <Input.TextArea\r\n          value={commentText}\r\n          onChange={onChangeCommentText}\r\n          rows={4}\r\n        ></Input.TextArea>\r\n        <Button\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          style={{ position: \"absolute\", right: 0, bottom: -40, zIndex: 1 }}\r\n          loading={addCommentLoading}\r\n        >\r\n          submit\r\n        </Button>\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n\r\nCommentForm.propTypes = {\r\n  post: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default CommentForm;\r\n"]},"metadata":{},"sourceType":"module"}