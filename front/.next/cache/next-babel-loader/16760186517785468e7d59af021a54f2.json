{"ast":null,"code":"import shortId from \"shortid\"; // npm i shortid, 항상 새로운 아이디를 생성해줌\n\nimport produce from \"immer\"; // npm i immer\n\nimport faker from \"faker\"; // npm i faker\n\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePost: true,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport var generateDummyPost = function generateDummyPost(number) {\n  return Array(number).fill().map(function () {\n    return {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.paragraph(),\n      Images: [{\n        src: faker.image.image()\n      }],\n      Comments: [{\n        User: {\n          id: shortId.generate(),\n          nickname: faker.name.findName()\n        },\n        content: faker.lorem.sentence()\n      }]\n    };\n  });\n}; // --- 상수화\n\nexport var LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\nexport var LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\nexport var LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; // ---\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    // npm i shortid, 항상 새로운 아이디를 생성해줌\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성은 지키면서)\n\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  return produce(state, function (draft) {\n    switch (action.type) {\n      case LOAD_POSTS_REQUEST:\n        draft.loadPostsLoading = true;\n        draft.loadPostsDone = false;\n        draft.loadPostsError = null;\n        break;\n\n      case LOAD_POSTS_SUCCESS:\n        draft.mainPosts = action.data.concat(draft.mainPosts);\n        draft.loadPostsLoading = false;\n        draft.loadPostsDone = true;\n        draft.hasMorePost = draft.mainPosts.length < 20;\n        break;\n\n      case LOAD_POSTS_FAILURE:\n        draft.loadPostsLoading = false;\n        draft.loadPostsError = action.error;\n        break;\n\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      // return {\n      //   ...state,\n      //   addPostLoading: true,\n      //   addPostDone: false,\n      //   addPostError: null,\n      // };\n\n      case ADD_POST_SUCCESS:\n        // draft가 알아서 불변성을 지켜주기 때문에 그냥 삽입하면 됨\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      // return {\n      //   ...state,\n      //   mainPosts: [dummyPost(action.data), ...state.mainPosts], // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\n      //   addPostLoading: false,\n      //   addPostDone: true,\n      //   // const a = [1, 2, 3, 4]\n      //   // const b = [5, ...a]\n      //   // b => [5, 1, 2, 3, 4]};\n      // };\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return {\n      //   ...state,\n      //   addPostLoading: false,\n      //   addPostError: action.error,\n      // };\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      //   return {\n      //   ...state,\n      //   addCommentLoading: true,\n      //   addCommentDone: false,\n      //   addCommentError: null,\n      // };\n\n      case ADD_COMMENT_SUCCESS:\n        var post = draft.mainPosts.find(function (v) {\n          return v.id === action.data.postId;\n        });\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      // action : {content: commentText, postId: post.id, userId: id}\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const addMainPosts = [...state.mainPosts];\n      // addMainPosts[postIndex] = post;\n      // return {\n      //   ...state,\n      //   mainPosts: addMainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      //   return {\n      //   ...state,\n      //   addCommentLoading: false,\n      //   addCommentError: action.error,\n      // };\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      // return {\n      //   ...state,\n      //   removePostLoading: true,\n      //   removePostDone: false,\n      //   removePostError: null,\n      // };\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(function (v) {\n          return v.id !== action.data;\n        });\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      // return {\n      //   ...state,\n      //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n      //   removePostLoading: false,\n      //   removePostDone: true,\n      // };\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n      // return {\n      //   ...state,\n      //   addPostLoading: false,\n      //   addPostError: action.error,\n      // };\n\n      default:\n        break;\n      // return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","imagePaths","hasMorePost","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","generateDummyPost","number","Array","fill","map","id","generate","User","nickname","name","findName","content","lorem","paragraph","Images","src","image","Comments","sentence","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","concat","length","error","unshift","post","find","v","postId","filter"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB,C,CAA+B;;AAC/B,OAAOC,OAAP,MAAoB,OAApB,C,CAA6B;;AAC7B,OAAOC,KAAP,MAAkB,OAAlB,C,CAA2B;;AAE3B,OAAO,IAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,EADe;AAE1BC,EAAAA,UAAU,EAAE,EAFc;AAG1BC,EAAAA,WAAW,EAAE,IAHa;AAI1BC,EAAAA,gBAAgB,EAAE,KAJQ;AAK1BC,EAAAA,aAAa,EAAE,KALW;AAM1BC,EAAAA,cAAc,EAAE,IANU;AAO1BC,EAAAA,cAAc,EAAE,KAPU;AAQ1BC,EAAAA,WAAW,EAAE,KARa;AAS1BC,EAAAA,YAAY,EAAE,IATY;AAU1BC,EAAAA,iBAAiB,EAAE,KAVO;AAW1BC,EAAAA,cAAc,EAAE,KAXU;AAY1BC,EAAAA,eAAe,EAAE,IAZS;AAa1BC,EAAAA,iBAAiB,EAAE,KAbO;AAc1BC,EAAAA,cAAc,EAAE,KAdU;AAe1BC,EAAAA,eAAe,EAAE;AAfS,CAArB;AAkBP,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,MAAD,EAAY;AAC3C,SAAOC,KAAK,CAACD,MAAD,CAAL,CACJE,IADI,GAEJC,GAFI,CAEA,YAAM;AACT,WAAO;AACLC,MAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADC;AAELC,MAAAA,IAAI,EAAE;AACJF,QAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADA;AAEJE,QAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,IAAN,CAAWC,QAAX;AAFN,OAFD;AAMLC,MAAAA,OAAO,EAAE5B,KAAK,CAAC6B,KAAN,CAAYC,SAAZ,EANJ;AAOLC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,GAAG,EAAEhC,KAAK,CAACiC,KAAN,CAAYA,KAAZ;AADP,OADM,CAPH;AAYLC,MAAAA,QAAQ,EAAE,CACR;AACEV,QAAAA,IAAI,EAAE;AACJF,UAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADA;AAEJE,UAAAA,QAAQ,EAAEzB,KAAK,CAAC0B,IAAN,CAAWC,QAAX;AAFN,SADR;AAKEC,QAAAA,OAAO,EAAE5B,KAAK,CAAC6B,KAAN,CAAYM,QAAZ;AALX,OADQ;AAZL,KAAP;AAsBD,GAzBI,CAAP;AA0BD,CA3BM,C,CA6BP;;AACA,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AACP,OAAO,IAAMC,kBAAkB,GAAG,oBAA3B;AAEP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,IAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B,C,CACP;;AAEA,OAAO,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD;AAAA,SAAW;AAChCC,IAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,IAAAA,IAAI,EAAJA;AAFgC,GAAX;AAAA,CAAhB;AAKP,OAAO,IAAME,UAAU,GAAG,SAAbA,UAAa,CAACF,IAAD;AAAA,SAAW;AACnCC,IAAAA,IAAI,EAAEL,mBAD6B;AAEnCI,IAAAA,IAAI,EAAJA;AAFmC,GAAX;AAAA,CAAnB;;AAKP,IAAMG,SAAS,GAAG,SAAZA,SAAY,CAACH,IAAD,EAAU;AAC1B,SAAO;AACL3B,IAAAA,EAAE,EAAE2B,IAAI,CAAC3B,EADJ;AAELM,IAAAA,OAAO,EAAEqB,IAAI,CAACrB,OAFT;AAGLJ,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAE,CADA;AAEJG,MAAAA,QAAQ,EAAE;AAFN,KAHD;AAOLM,IAAAA,MAAM,EAAE,EAPH;AAQLG,IAAAA,QAAQ,EAAE;AARL,GAAP;AAUD,CAXD;;AAYA,IAAMmB,YAAY,GAAG,SAAfA,YAAe,CAACJ,IAAD,EAAU;AAC7B,SAAO;AACL3B,IAAAA,EAAE,EAAExB,OAAO,CAACyB,QAAR,EADC;AACmB;AACxBK,IAAAA,OAAO,EAAEqB,IAFJ;AAGLzB,IAAAA,IAAI,EAAE;AACJF,MAAAA,EAAE,EAAE,CADA;AAEJG,MAAAA,QAAQ,EAAE;AAFN;AAHD,GAAP;AAQD,CATD,C,CAWA;;;AACA,IAAM6B,OAAO,GAAG,SAAVA,OAAU,GAAkC;AAAA,MAAjCC,KAAiC,uEAAzBtD,YAAyB;AAAA,MAAXuD,MAAW;AAChD,SAAOzD,OAAO,CAACwD,KAAD,EAAQ,UAACE,KAAD,EAAW;AAC/B,YAAQD,MAAM,CAACN,IAAf;AACE,WAAKd,kBAAL;AACEqB,QAAAA,KAAK,CAACpD,gBAAN,GAAyB,IAAzB;AACAoD,QAAAA,KAAK,CAACnD,aAAN,GAAsB,KAAtB;AACAmD,QAAAA,KAAK,CAAClD,cAAN,GAAuB,IAAvB;AACA;;AACF,WAAK8B,kBAAL;AACEoB,QAAAA,KAAK,CAACvD,SAAN,GAAkBsD,MAAM,CAACP,IAAP,CAAYS,MAAZ,CAAmBD,KAAK,CAACvD,SAAzB,CAAlB;AACAuD,QAAAA,KAAK,CAACpD,gBAAN,GAAyB,KAAzB;AACAoD,QAAAA,KAAK,CAACnD,aAAN,GAAsB,IAAtB;AACAmD,QAAAA,KAAK,CAACrD,WAAN,GAAoBqD,KAAK,CAACvD,SAAN,CAAgByD,MAAhB,GAAyB,EAA7C;AACA;;AACF,WAAKrB,kBAAL;AACEmB,QAAAA,KAAK,CAACpD,gBAAN,GAAyB,KAAzB;AACAoD,QAAAA,KAAK,CAAClD,cAAN,GAAuBiD,MAAM,CAACI,KAA9B;AACA;;AAEF,WAAKrB,gBAAL;AACEkB,QAAAA,KAAK,CAACjD,cAAN,GAAuB,IAAvB;AACAiD,QAAAA,KAAK,CAAChD,WAAN,GAAoB,KAApB;AACAgD,QAAAA,KAAK,CAAC/C,YAAN,GAAqB,IAArB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK8B,gBAAL;AACE;AACAiB,QAAAA,KAAK,CAACvD,SAAN,CAAgB2D,OAAhB,CAAwBT,SAAS,CAACI,MAAM,CAACP,IAAR,CAAjC;AACAQ,QAAAA,KAAK,CAACjD,cAAN,GAAuB,KAAvB;AACAiD,QAAAA,KAAK,CAAChD,WAAN,GAAoB,IAApB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKgC,gBAAL;AACEgB,QAAAA,KAAK,CAACjD,cAAN,GAAuB,KAAvB;AACAiD,QAAAA,KAAK,CAAC/C,YAAN,GAAqB8C,MAAM,CAACI,KAA5B;AACA;AACF;AACA;AACA;AACA;AACA;;AAEA,WAAKf,mBAAL;AACEY,QAAAA,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B;AACA2C,QAAAA,KAAK,CAAC1C,cAAN,GAAuB,KAAvB;AACA0C,QAAAA,KAAK,CAACzC,eAAN,GAAwB,IAAxB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK8B,mBAAL;AACE,YAAMgB,IAAI,GAAGL,KAAK,CAACvD,SAAN,CAAgB6D,IAAhB,CAAqB,UAACC,CAAD;AAAA,iBAAOA,CAAC,CAAC1C,EAAF,KAASkC,MAAM,CAACP,IAAP,CAAYgB,MAA5B;AAAA,SAArB,CAAb;AACAH,QAAAA,IAAI,CAAC5B,QAAL,CAAc2B,OAAd,CAAsBR,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYrB,OAAb,CAAlC;AACA6B,QAAAA,KAAK,CAAC3C,iBAAN,GAA0B,KAA1B;AACA2C,QAAAA,KAAK,CAAC1C,cAAN,GAAuB,IAAvB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKgC,mBAAL;AACEU,QAAAA,KAAK,CAAC3C,iBAAN,GAA0B,KAA1B;AACA2C,QAAAA,KAAK,CAACzC,eAAN,GAAwBwC,MAAM,CAACI,KAA/B;AACA;AACF;AACA;AACA;AACA;AACA;;AAEA,WAAKlB,mBAAL;AACEe,QAAAA,KAAK,CAAC9C,iBAAN,GAA0B,IAA1B;AACA8C,QAAAA,KAAK,CAAC7C,cAAN,GAAuB,KAAvB;AACA6C,QAAAA,KAAK,CAAC5C,eAAN,GAAwB,IAAxB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACA,WAAK8B,mBAAL;AACEc,QAAAA,KAAK,CAACvD,SAAN,GAAkBuD,KAAK,CAACvD,SAAN,CAAgBgE,MAAhB,CAAuB,UAACF,CAAD;AAAA,iBAAOA,CAAC,CAAC1C,EAAF,KAASkC,MAAM,CAACP,IAAvB;AAAA,SAAvB,CAAlB;AACAQ,QAAAA,KAAK,CAAC9C,iBAAN,GAA0B,KAA1B;AACA8C,QAAAA,KAAK,CAAC7C,cAAN,GAAuB,IAAvB;AACA;AACF;AACA;AACA;AACA;AACA;AACA;;AACA,WAAKgC,mBAAL;AACEa,QAAAA,KAAK,CAAC9C,iBAAN,GAA0B,KAA1B;AACA8C,QAAAA,KAAK,CAAC5C,eAAN,GAAwB2C,MAAM,CAACI,KAA/B;AACF;AACA;AACA;AACA;AACA;;AACA;AACE;AACF;AA9HF;AAgID,GAjIa,CAAd;AAkID,CAnID;;AAqIA,eAAeN,OAAf","sourcesContent":["import shortId from \"shortid\"; // npm i shortid, 항상 새로운 아이디를 생성해줌\r\nimport produce from \"immer\"; // npm i immer\r\nimport faker from \"faker\"; // npm i faker\r\n\r\nexport const initialState = {\r\n  mainPosts: [],\r\n  imagePaths: [],\r\n  hasMorePost: true,\r\n  loadPostsLoading: false,\r\n  loadPostsDone: false,\r\n  loadPostsError: null,\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\nexport const generateDummyPost = (number) => {\r\n  return Array(number)\r\n    .fill()\r\n    .map(() => {\r\n      return {\r\n        id: shortId.generate(),\r\n        User: {\r\n          id: shortId.generate(),\r\n          nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [\r\n          {\r\n            src: faker.image.image(),\r\n          },\r\n        ],\r\n        Comments: [\r\n          {\r\n            User: {\r\n              id: shortId.generate(),\r\n              nickname: faker.name.findName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n          },\r\n        ],\r\n      };\r\n    });\r\n};\r\n\r\n// --- 상수화\r\nexport const LOAD_POSTS_REQUEST = \"LOAD_POSTS_REQUEST\";\r\nexport const LOAD_POSTS_SUCCESS = \"LOAD_POSTS_SUCCESS\";\r\nexport const LOAD_POSTS_FAILURE = \"LOAD_POSTS_FAILURE\";\r\n\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n// ---\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => {\r\n  return {\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n  };\r\n};\r\nconst dummyComment = (data) => {\r\n  return {\r\n    id: shortId.generate(), // npm i shortid, 항상 새로운 아이디를 생성해줌\r\n    content: data,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n  };\r\n};\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case LOAD_POSTS_REQUEST:\r\n        draft.loadPostsLoading = true;\r\n        draft.loadPostsDone = false;\r\n        draft.loadPostsError = null;\r\n        break;\r\n      case LOAD_POSTS_SUCCESS:\r\n        draft.mainPosts = action.data.concat(draft.mainPosts);\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsDone = true;\r\n        draft.hasMorePost = draft.mainPosts.length < 20;\r\n        break;\r\n      case LOAD_POSTS_FAILURE:\r\n        draft.loadPostsLoading = false;\r\n        draft.loadPostsError = action.error;\r\n        break;\r\n\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   addPostLoading: true,\r\n      //   addPostDone: false,\r\n      //   addPostError: null,\r\n      // };\r\n      case ADD_POST_SUCCESS:\r\n        // draft가 알아서 불변성을 지켜주기 때문에 그냥 삽입하면 됨\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts: [dummyPost(action.data), ...state.mainPosts], // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\r\n      //   addPostLoading: false,\r\n      //   addPostDone: true,\r\n      //   // const a = [1, 2, 3, 4]\r\n      //   // const b = [5, ...a]\r\n      //   // b => [5, 1, 2, 3, 4]};\r\n      // };\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   addPostLoading: false,\r\n      //   addPostError: action.error,\r\n      // };\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      //   return {\r\n      //   ...state,\r\n      //   addCommentLoading: true,\r\n      //   addCommentDone: false,\r\n      //   addCommentError: null,\r\n      // };\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      // action : {content: commentText, postId: post.id, userId: id}\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const addMainPosts = [...state.mainPosts];\r\n      // addMainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts: addMainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      //   return {\r\n      //   ...state,\r\n      //   addCommentLoading: false,\r\n      //   addCommentError: action.error,\r\n      // };\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   removePostLoading: true,\r\n      //   removePostDone: false,\r\n      //   removePostError: null,\r\n      // };\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n      //   removePostLoading: false,\r\n      //   removePostDone: true,\r\n      // };\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n      // return {\r\n      //   ...state,\r\n      //   addPostLoading: false,\r\n      //   addPostError: action.error,\r\n      // };\r\n      default:\r\n        break;\r\n      // return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}