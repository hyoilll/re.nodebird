{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport shortId from \"shortid\";\nexport var initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"Hyoilzzz\"\n    },\n    content: \"첫번째 게시글 #hyoil #zzz#bbb\",\n    Images: [{\n      src: \"https://placeimg.com/64/64/1\"\n    }, {\n      src: \"https://placeimg.com/64/64/2\"\n    }, {\n      src: \"https://placeimg.com/64/64/3\"\n    }],\n    Comments: [{\n      User: {\n        nickname: \"nero\"\n      },\n      content: \"개정판이 나왔네요.\"\n    }, {\n      User: {\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고 싶어요.\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // --- 상수화\n\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; // ---\n\nexport var addPost = function addPost(data) {\n  return {\n    type: ADD_POST_REQUEST,\n    data: data\n  };\n};\nexport var addComment = function addComment(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar dummyPost = function dummyPost(data) {\n  return {\n    id: shortId.generate(),\n    // npm i shortid, 항상 새로운 아이디를 생성해줌\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nvar dummyComment = function dummyComment(data) {\n  return {\n    id: shortId.generate(),\n    // npm i shortid, 항상 새로운 아이디를 생성해줌\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    }\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      console.log(\"ADD_POST_REQUEST\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      console.log(\"ADD_POST_SUCCESS\", action.type, action.data);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data)].concat(_toConsumableArray(state.mainPosts)),\n        // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\n        addPostLoading: false,\n        addPostDone: true // const a = [1, 2, 3, 4]\n        // const b = [5, ...a]\n        // b => [5, 1, 2, 3, 4]};\n\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentDone: true // const a = [1, 2, 3, 4]\n        // const b = [5, ...a]\n        // b => [5, 1, 2, 3, 4]};\n\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","generate","dummyComment","reducer","state","action","console","log","error"],"mappings":"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","sourcesContent":["import shortId from \"shortid\";\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"Hyoilzzz\",\r\n      },\r\n      content: \"첫번째 게시글 #hyoil #zzz#bbb\",\r\n      Images: [\r\n        { src: \"https://placeimg.com/64/64/1\" },\r\n        { src: \"https://placeimg.com/64/64/2\" },\r\n        { src: \"https://placeimg.com/64/64/3\" },\r\n      ],\r\n      Comments: [\r\n        {\r\n          User: {\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"개정판이 나왔네요.\",\r\n        },\r\n        {\r\n          User: {\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고 싶어요.\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n// --- 상수화\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n// ---\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => {\r\n  return {\r\n    id: shortId.generate(), // npm i shortid, 항상 새로운 아이디를 생성해줌\r\n    content: data,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n  };\r\n};\r\nconst dummyComment = (data) => {\r\n  return {\r\n    id: shortId.generate(), // npm i shortid, 항상 새로운 아이디를 생성해줌\r\n    content: data,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n  };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      console.log(\"ADD_POST_REQUEST\");\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      console.log(\"ADD_POST_SUCCESS\", action.type, action.data);\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts], // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n        // const a = [1, 2, 3, 4]\r\n        // const b = [5, ...a]\r\n        // b => [5, 1, 2, 3, 4]};\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommentDone: false,\r\n        addCommentError: null,\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n        // const a = [1, 2, 3, 4]\r\n        // const b = [5, ...a]\r\n        // b => [5, 1, 2, 3, 4]};\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}