{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dlgyd\\\\OneDrive\\\\\\uBB38\\uC11C\\\\GitHub\\\\re.nodebird\\\\front\\\\pages\\\\index.js\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useEffect } from \"react\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  const {\n    me\n  } = useSelector(state => state.user);\n  const mainPosts = useSelector(state => state.post.mainPosts); // 홈 화면이 켜지면 액션 발생\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch({\n      type: LOAD_POSTS_REQUEST\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      console.log(window.scrollY, // 가장 맨 위에서 스크롤을 얼마나 내렸는지\n      // 키보드 커서 개념으로 생각해보자, 스크롤에서 가장 위에가 기준점\n      // 스크롤을 가장 밑으로 내려도 아직 화면 크기만크므이 공간이 남아있음\n      // 이 공간을 알기 위해 밑의 clientHeight가 필요한 것\n      // => scrollY + clientHeight = scrollHeight\n      document.documentElement.clientHeight, // 내 화면이 보이는 길이\n      document.documentElement.scrollHeight // 가장위에서 가장 아래, 총 길이\n      );\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      // useEffect에서 window event를 다룰 때 return문을 활용하여\n      // event를 제거해줘야 함. 안그러면 메모리에 쌓임\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [me && /*#__PURE__*/_jsxDEV(PostForm, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 14\n    }, this), mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n      post: post\n    }, post.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\nexport default Home;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/pages/index.js"],"names":["useDispatch","useSelector","AppLayout","PostForm","PostCard","useEffect","LOAD_POSTS_REQUEST","Home","me","state","user","mainPosts","post","dispatch","type","onScroll","console","log","window","scrollY","document","documentElement","clientHeight","scrollHeight","addEventListener","removeEventListener","map","id"],"mappings":";AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,kBAAT,QAAmC,kBAAnC;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAM;AAAEC,IAAAA;AAAF,MAASP,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAMC,SAAS,GAAGV,WAAW,CAAEQ,KAAD,IAAWA,KAAK,CAACG,IAAN,CAAWD,SAAvB,CAA7B,CAFiB,CAIjB;;AACA,QAAME,QAAQ,GAAGb,WAAW,EAA5B;AACAK,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMAD,EAAAA,SAAS,CAAC,MAAM;AACd,aAASU,QAAT,GAAoB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CACEC,MAAM,CAACC,OADT,EAEE;AACA;AACA;AACA;AACA;AACAC,MAAAA,QAAQ,CAACC,eAAT,CAAyBC,YAP3B,EAOyC;AACvCF,MAAAA,QAAQ,CAACC,eAAT,CAAyBE,YAR3B,CAQwC;AARxC;AAUD;;AACDL,IAAAA,MAAM,CAACM,gBAAP,CAAwB,QAAxB,EAAkCT,QAAlC;AACA,WAAO,MAAM;AACX;AACA;AACAG,MAAAA,MAAM,CAACO,mBAAP,CAA2B,QAA3B,EAAqCV,QAArC;AACD,KAJD;AAKD,GAnBQ,EAmBN,EAnBM,CAAT;AAqBA,sBACE,QAAC,SAAD;AAAA,eAEGP,EAAE,iBAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAFT,EAGGG,SAAS,CAACe,GAAV,CAAed,IAAD,iBACb,QAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACe,EAApB;AAAA;AAAA;AAAA;AAAA,YADD,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AASD,CA1CD;;AA4CA,eAAepB,IAAf","sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\r\nimport AppLayout from \"../components/AppLayout\";\r\n\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { useEffect } from \"react\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\n\r\nconst Home = () => {\r\n  const { me } = useSelector((state) => state.user);\r\n  const mainPosts = useSelector((state) => state.post.mainPosts);\r\n\r\n  // 홈 화면이 켜지면 액션 발생\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch({\r\n      type: LOAD_POSTS_REQUEST,\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      console.log(\r\n        window.scrollY,\r\n        // 가장 맨 위에서 스크롤을 얼마나 내렸는지\r\n        // 키보드 커서 개념으로 생각해보자, 스크롤에서 가장 위에가 기준점\r\n        // 스크롤을 가장 밑으로 내려도 아직 화면 크기만크므이 공간이 남아있음\r\n        // 이 공간을 알기 위해 밑의 clientHeight가 필요한 것\r\n        // => scrollY + clientHeight = scrollHeight\r\n        document.documentElement.clientHeight, // 내 화면이 보이는 길이\r\n        document.documentElement.scrollHeight // 가장위에서 가장 아래, 총 길이\r\n      );\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      // useEffect에서 window event를 다룰 때 return문을 활용하여\r\n      // event를 제거해줘야 함. 안그러면 메모리에 쌓임\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <AppLayout>\r\n      {/* children */}\r\n      {me && <PostForm></PostForm>}\r\n      {mainPosts.map((post) => (\r\n        <PostCard key={post.id} post={post}></PostCard>\r\n      ))}\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n"]},"metadata":{},"sourceType":"module"}