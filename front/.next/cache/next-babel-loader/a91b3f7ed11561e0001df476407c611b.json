{"ast":null,"code":"import { all, fork } from \"@redux-saga/core/effects\";\n\nfunction logInAPI(data) {\n  return axios.post(\"/api/login\", data);\n} // action 매개변수로 로그인 정보가 들어옴\n// action.type : \"~~\"\n// action.data : data\n// loginAPI(action.data) ==> call(logInAPI, action.data)\n\n\nfunction* logIn(action) {\n  try {\n    // const result = yield call(logInAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_IN_SUCCESS\",\n      data: action.data // 성공결과가 담겨있음\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_IN_FAILURE\",\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction logOutAPI() {\n  return axios.post(\"/api/logout\");\n}\n\nfunction* logOut() {\n  try {\n    // const result = yield call(logOutAPI);\n    yield delay(1000);\n    yield put({\n      type: \"LOG_OUT_SUCCESS\",\n      data: result.data // 성공결과가 담겨있음\n\n    });\n  } catch (err) {\n    yield put({\n      type: \"LOG_OUT_FAILURE\",\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); // LOG_IN 액션이 실행되면 logIn함수가 실행 , reducer와 saga가 동시에 실행됨\n}\n\nfunction* watchLogOut() {\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut)]);\n}","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/sagas/user.js"],"names":["all","fork","logInAPI","data","axios","post","logIn","action","delay","put","type","err","response","logOutAPI","logOut","result","watchLogin","takeLatest","watchLogOut","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,QAA0B,0BAA1B;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACtB,SAAOC,KAAK,CAACC,IAAN,CAAW,YAAX,EAAyBF,IAAzB,CAAP;AACD,C,CAED;AACA;AACA;AACA;;;AACA,UAAUG,KAAV,CAAgBC,MAAhB,EAAwB;AACtB,MAAI;AACF;AACA,UAAMC,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERP,MAAAA,IAAI,EAAEI,MAAM,CAACJ,IAFL,CAEW;;AAFX,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,gBADE;AAERP,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT,IAFX,CAEiB;;AAFjB,KAAD,CAAT;AAID;AACF;;AAED,SAASU,SAAT,GAAqB;AACnB,SAAOT,KAAK,CAACC,IAAN,CAAW,aAAX,CAAP;AACD;;AAED,UAAUS,MAAV,GAAmB;AACjB,MAAI;AACF;AACA,UAAMN,KAAK,CAAC,IAAD,CAAX;AACA,UAAMC,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERP,MAAAA,IAAI,EAAEY,MAAM,CAACZ,IAFL,CAEW;;AAFX,KAAD,CAAT;AAID,GAPD,CAOE,OAAOQ,GAAP,EAAY;AACZ,UAAMF,GAAG,CAAC;AACRC,MAAAA,IAAI,EAAE,iBADE;AAERP,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT,IAFX,CAEiB;;AAFjB,KAAD,CAAT;AAID;AACF;;AAED,UAAUa,UAAV,GAAuB;AACrB,QAAMC,UAAU,CAAC,gBAAD,EAAmBX,KAAnB,CAAhB,CADqB,CACsB;AAC5C;;AAED,UAAUY,WAAV,GAAwB;AACtB,QAAMD,UAAU,CAAC,iBAAD,EAAoBH,MAApB,CAAhB;AACD;;AAED,eAAe,UAAUK,QAAV,GAAqB;AAClC,QAAMnB,GAAG,CAAC,CAACC,IAAI,CAACe,UAAD,CAAL,EAAmBf,IAAI,CAACiB,WAAD,CAAvB,CAAD,CAAT;AACD","sourcesContent":["import { all, fork } from \"@redux-saga/core/effects\";\r\n\r\nfunction logInAPI(data) {\r\n  return axios.post(\"/api/login\", data);\r\n}\r\n\r\n// action 매개변수로 로그인 정보가 들어옴\r\n// action.type : \"~~\"\r\n// action.data : data\r\n// loginAPI(action.data) ==> call(logInAPI, action.data)\r\nfunction* logIn(action) {\r\n  try {\r\n    // const result = yield call(logInAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_IN_SUCCESS\",\r\n      data: action.data, // 성공결과가 담겨있음\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_IN_FAILURE\",\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction logOutAPI() {\r\n  return axios.post(\"/api/logout\");\r\n}\r\n\r\nfunction* logOut() {\r\n  try {\r\n    // const result = yield call(logOutAPI);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: \"LOG_OUT_SUCCESS\",\r\n      data: result.data, // 성공결과가 담겨있음\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: \"LOG_OUT_FAILURE\",\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchLogin() {\r\n  yield takeLatest(\"LOG_IN_REQUEST\", logIn); // LOG_IN 액션이 실행되면 logIn함수가 실행 , reducer와 saga가 동시에 실행됨\r\n}\r\n\r\nfunction* watchLogOut() {\r\n  yield takeLatest(\"LOG_OUT_REQUEST\", logOut);\r\n}\r\n\r\nexport default function* userSaga() {\r\n  yield all([fork(watchLogin), fork(watchLogOut)]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}