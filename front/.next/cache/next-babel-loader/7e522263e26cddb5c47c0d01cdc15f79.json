{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from \"next-redux-wrapper\";\nconst initialState = {\n  user: {\n    isLoggedIn: false,\n    user: null,\n    signUpData: {},\n    loginData: {}\n  },\n  post: {\n    mainPosts: {}\n  }\n};\nexport const loginAction = data => {\n  return {\n    type: \"LOG_IN\",\n    data\n  };\n};\nexport const logoutAction = () => {\n  return {\n    type: \"LOG_OUT\"\n  };\n}; // reducer = (이전상태, 액션) => 다음상태\n\nconst rootReducer = (state = initialState, action) => {\n  switch (action.type) {\n    //     case \"CHANGE_NICKNAME\":\n    //       return {\n    //         ...state,\n    //         name: action.data,\n    //       };\n    //   }\n    case \"LOG_IN\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: true,\n          user: action.data\n        })\n      });\n\n    case \"LOG_OUT\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: _objectSpread(_objectSpread({}, state.user), {}, {\n          isLoggedIn: false,\n          user: null\n        })\n      });\n  }\n};\n\nexport default rootReducer; // action 형태\n// const changeNickname = {\n//   type: \"CHANGE_NICKNAME\",\n//   data: \"boogicho\",\n// };\n// const changeNickname = {\n//   type: \"CHANGE_NICKNAME\",\n//   data: \"pika\",\n// };\n// =>\n// < action creator > : Change_nickname의 형태의 action이 많아지면 코드량도 많아지고 중복되는것이 많기 떄문에 함수로 줄인 것\n// const changeNickname = (data) => {\n//     return {\n//       type: \"CHANGE_NICKNAME\",\n//       data: data,\n//     };\n//   };\n// changeNickname(\"hyoro\");\n// action 생성 -> actino dispatch\n// store.dispatch(changeNickname('hyoro'))","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/reducers/index.js"],"names":["HYDRATE","initialState","user","isLoggedIn","signUpData","loginData","post","mainPosts","loginAction","data","type","logoutAction","rootReducer","state","action"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAE,KADR;AAEJD,IAAAA,IAAI,EAAE,IAFF;AAGJE,IAAAA,UAAU,EAAE,EAHR;AAIJC,IAAAA,SAAS,EAAE;AAJP,GADa;AAOnBC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE;AADP;AAPa,CAArB;AAYA,OAAO,MAAMC,WAAW,GAAIC,IAAD,IAAU;AACnC,SAAO;AACLC,IAAAA,IAAI,EAAE,QADD;AAELD,IAAAA;AAFK,GAAP;AAID,CALM;AAOP,OAAO,MAAME,YAAY,GAAG,MAAM;AAChC,SAAO;AACLD,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,MAAME,WAAW,GAAG,CAACC,KAAK,GAAGZ,YAAT,EAAuBa,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACJ,IAAf;AACE;AACA;AACA;AACA;AACA;AACA;AACA,SAAK,QAAL;AACE,6CACKG,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AAEFC,UAAAA,UAAU,EAAE,IAFV;AAGFD,UAAAA,IAAI,EAAEY,MAAM,CAACL;AAHX;AAFN;;AAQF,SAAK,SAAL;AACE,6CACKI,KADL;AAEEX,QAAAA,IAAI,kCACCW,KAAK,CAACX,IADP;AAEFC,UAAAA,UAAU,EAAE,KAFV;AAGFD,UAAAA,IAAI,EAAE;AAHJ;AAFN;AAjBJ;AA0BD,CA3BD;;AA6BA,eAAeU,WAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA","sourcesContent":["import { HYDRATE } from \"next-redux-wrapper\";\r\n\r\nconst initialState = {\r\n  user: {\r\n    isLoggedIn: false,\r\n    user: null,\r\n    signUpData: {},\r\n    loginData: {},\r\n  },\r\n  post: {\r\n    mainPosts: {},\r\n  },\r\n};\r\n\r\nexport const loginAction = (data) => {\r\n  return {\r\n    type: \"LOG_IN\",\r\n    data,\r\n  };\r\n};\r\n\r\nexport const logoutAction = () => {\r\n  return {\r\n    type: \"LOG_OUT\",\r\n  };\r\n};\r\n\r\n// reducer = (이전상태, 액션) => 다음상태\r\nconst rootReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    //     case \"CHANGE_NICKNAME\":\r\n    //       return {\r\n    //         ...state,\r\n    //         name: action.data,\r\n    //       };\r\n    //   }\r\n    case \"LOG_IN\":\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: true,\r\n          user: action.data,\r\n        },\r\n      };\r\n    case \"LOG_OUT\":\r\n      return {\r\n        ...state,\r\n        user: {\r\n          ...state.user,\r\n          isLoggedIn: false,\r\n          user: null,\r\n        },\r\n      };\r\n  }\r\n};\r\n\r\nexport default rootReducer;\r\n\r\n// action 형태\r\n// const changeNickname = {\r\n//   type: \"CHANGE_NICKNAME\",\r\n//   data: \"boogicho\",\r\n// };\r\n// const changeNickname = {\r\n//   type: \"CHANGE_NICKNAME\",\r\n//   data: \"pika\",\r\n// };\r\n\r\n// =>\r\n\r\n// < action creator > : Change_nickname의 형태의 action이 많아지면 코드량도 많아지고 중복되는것이 많기 떄문에 함수로 줄인 것\r\n// const changeNickname = (data) => {\r\n//     return {\r\n//       type: \"CHANGE_NICKNAME\",\r\n//       data: data,\r\n//     };\r\n//   };\r\n\r\n// changeNickname(\"hyoro\");\r\n\r\n// action 생성 -> actino dispatch\r\n// store.dispatch(changeNickname('hyoro'))\r\n"]},"metadata":{},"sourceType":"module"}