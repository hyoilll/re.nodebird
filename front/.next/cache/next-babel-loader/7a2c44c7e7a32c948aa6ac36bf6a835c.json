{"ast":null,"code":"import shortId from \"shortid\"; // npm i shortid, 항상 새로운 아이디를 생성해줌\n\nimport produce from \"immer\"; // npm i immer\n\nimport faker from \"faker\"; // npm i faker\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"Hyoilzzz\"\n    },\n    content: \"첫번째 게시글 #hyoil #zzz#bbb\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://placeimg.com/64/64/1\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://placeimg.com/64/64/2\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://placeimg.com/64/64/3\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"개정판이 나왔네요.\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고 싶어요.\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\ninitialState.mainPosts.concat(Array(20).fill().map((v, i) => {\n  return {\n    id: shortId.generate(),\n    User: {\n      id: shortId.generate(),\n      nickname: faker.name.findName()\n    },\n    content: faker.lorem.paragraph(),\n    Images: [{\n      src: faker.image.image()\n    }],\n    Comments: [{\n      User: {\n        id: shortId.generate(),\n        nickname: faker.name.findName()\n      },\n      content: faker.lorem.sentence()\n    }]\n  };\n})); // --- 상수화\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; // ---\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nconst dummyComment = data => {\n  return {\n    id: shortId.generate(),\n    // npm i shortid, 항상 새로운 아이디를 생성해줌\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    }\n  };\n}; // 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성은 지키면서)\n\n\nconst reducer = (state = initialState, action) => {\n  return produce(state, draft => {\n    switch (action.type) {\n      case ADD_POST_REQUEST:\n        draft.addPostLoading = true;\n        draft.addPostDone = false;\n        draft.addPostError = null;\n        break;\n      // return {\n      //   ...state,\n      //   addPostLoading: true,\n      //   addPostDone: false,\n      //   addPostError: null,\n      // };\n\n      case ADD_POST_SUCCESS:\n        // draft가 알아서 불변성을 지켜주기 때문에 그냥 삽입하면 됨\n        draft.mainPosts.unshift(dummyPost(action.data));\n        draft.addPostLoading = false;\n        draft.addPostDone = true;\n        break;\n      // return {\n      //   ...state,\n      //   mainPosts: [dummyPost(action.data), ...state.mainPosts], // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\n      //   addPostLoading: false,\n      //   addPostDone: true,\n      //   // const a = [1, 2, 3, 4]\n      //   // const b = [5, ...a]\n      //   // b => [5, 1, 2, 3, 4]};\n      // };\n\n      case ADD_POST_FAILURE:\n        draft.addPostLoading = false;\n        draft.addPostError = action.error;\n        break;\n      // return {\n      //   ...state,\n      //   addPostLoading: false,\n      //   addPostError: action.error,\n      // };\n\n      case ADD_COMMENT_REQUEST:\n        draft.addCommentLoading = true;\n        draft.addCommentDone = false;\n        draft.addCommentError = null;\n        break;\n      //   return {\n      //   ...state,\n      //   addCommentLoading: true,\n      //   addCommentDone: false,\n      //   addCommentError: null,\n      // };\n\n      case ADD_COMMENT_SUCCESS:\n        const post = draft.mainPosts.find(v => v.id === action.data.postId);\n        post.Comments.unshift(dummyComment(action.data.content));\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      // action : {content: commentText, postId: post.id, userId: id}\n      // const postIndex = state.mainPosts.findIndex(\n      //   (v) => v.id === action.data.postId\n      // );\n      // const post = { ...state.mainPosts[postIndex] };\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      // const addMainPosts = [...state.mainPosts];\n      // addMainPosts[postIndex] = post;\n      // return {\n      //   ...state,\n      //   mainPosts: addMainPosts,\n      //   addCommentLoading: false,\n      //   addCommentDone: true,\n      // };\n\n      case ADD_COMMENT_FAILURE:\n        draft.addCommentLoading = false;\n        draft.addCommentError = action.error;\n        break;\n      //   return {\n      //   ...state,\n      //   addCommentLoading: false,\n      //   addCommentError: action.error,\n      // };\n\n      case REMOVE_POST_REQUEST:\n        draft.removePostLoading = true;\n        draft.removePostDone = false;\n        draft.removePostError = null;\n        break;\n      // return {\n      //   ...state,\n      //   removePostLoading: true,\n      //   removePostDone: false,\n      //   removePostError: null,\n      // };\n\n      case REMOVE_POST_SUCCESS:\n        draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data);\n        draft.removePostLoading = false;\n        draft.removePostDone = true;\n        break;\n      // return {\n      //   ...state,\n      //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\n      //   removePostLoading: false,\n      //   removePostDone: true,\n      // };\n\n      case REMOVE_POST_FAILURE:\n        draft.removePostLoading = false;\n        draft.removePostError = action.error;\n      // return {\n      //   ...state,\n      //   addPostLoading: false,\n      //   addPostError: action.error,\n      // };\n\n      default:\n        break;\n      // return state;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/reducers/post.js"],"names":["shortId","produce","faker","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","concat","Array","fill","map","v","i","name","findName","lorem","paragraph","image","sentence","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","draft","unshift","error","post","find","postId","filter"],"mappings":"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","sourcesContent":["import shortId from \"shortid\"; // npm i shortid, 항상 새로운 아이디를 생성해줌\r\nimport produce from \"immer\"; // npm i immer\r\nimport faker from \"faker\"; // npm i faker\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"Hyoilzzz\",\r\n      },\r\n      content: \"첫번째 게시글 #hyoil #zzz#bbb\",\r\n      Images: [\r\n        { id: shortId.generate(), src: \"https://placeimg.com/64/64/1\" },\r\n        { id: shortId.generate(), src: \"https://placeimg.com/64/64/2\" },\r\n        { id: shortId.generate(), src: \"https://placeimg.com/64/64/3\" },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"개정판이 나왔네요.\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고 싶어요.\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\ninitialState.mainPosts.concat(\r\n  Array(20)\r\n    .fill()\r\n    .map((v, i) => {\r\n      return {\r\n        id: shortId.generate(),\r\n        User: {\r\n          id: shortId.generate(),\r\n          nickname: faker.name.findName(),\r\n        },\r\n        content: faker.lorem.paragraph(),\r\n        Images: [\r\n          {\r\n            src: faker.image.image(),\r\n          },\r\n        ],\r\n        Comments: [\r\n          {\r\n            User: {\r\n              id: shortId.generate(),\r\n              nickname: faker.name.findName(),\r\n            },\r\n            content: faker.lorem.sentence(),\r\n          },\r\n        ],\r\n      };\r\n    })\r\n);\r\n\r\n// --- 상수화\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n// ---\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => {\r\n  return {\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n  };\r\n};\r\nconst dummyComment = (data) => {\r\n  return {\r\n    id: shortId.generate(), // npm i shortid, 항상 새로운 아이디를 생성해줌\r\n    content: data,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n  };\r\n};\r\n\r\n// 이전 상태를 액션을 통해 다음 상태로 만들어 내는 함수(불변성은 지키면서)\r\nconst reducer = (state = initialState, action) => {\r\n  return produce(state, (draft) => {\r\n    switch (action.type) {\r\n      case ADD_POST_REQUEST:\r\n        draft.addPostLoading = true;\r\n        draft.addPostDone = false;\r\n        draft.addPostError = null;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   addPostLoading: true,\r\n      //   addPostDone: false,\r\n      //   addPostError: null,\r\n      // };\r\n      case ADD_POST_SUCCESS:\r\n        // draft가 알아서 불변성을 지켜주기 때문에 그냥 삽입하면 됨\r\n        draft.mainPosts.unshift(dummyPost(action.data));\r\n        draft.addPostLoading = false;\r\n        draft.addPostDone = true;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts: [dummyPost(action.data), ...state.mainPosts], // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\r\n      //   addPostLoading: false,\r\n      //   addPostDone: true,\r\n      //   // const a = [1, 2, 3, 4]\r\n      //   // const b = [5, ...a]\r\n      //   // b => [5, 1, 2, 3, 4]};\r\n      // };\r\n      case ADD_POST_FAILURE:\r\n        draft.addPostLoading = false;\r\n        draft.addPostError = action.error;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   addPostLoading: false,\r\n      //   addPostError: action.error,\r\n      // };\r\n\r\n      case ADD_COMMENT_REQUEST:\r\n        draft.addCommentLoading = true;\r\n        draft.addCommentDone = false;\r\n        draft.addCommentError = null;\r\n        break;\r\n      //   return {\r\n      //   ...state,\r\n      //   addCommentLoading: true,\r\n      //   addCommentDone: false,\r\n      //   addCommentError: null,\r\n      // };\r\n      case ADD_COMMENT_SUCCESS:\r\n        const post = draft.mainPosts.find((v) => v.id === action.data.postId);\r\n        post.Comments.unshift(dummyComment(action.data.content));\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentDone = true;\r\n        break;\r\n      // action : {content: commentText, postId: post.id, userId: id}\r\n      // const postIndex = state.mainPosts.findIndex(\r\n      //   (v) => v.id === action.data.postId\r\n      // );\r\n      // const post = { ...state.mainPosts[postIndex] };\r\n      // post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      // const addMainPosts = [...state.mainPosts];\r\n      // addMainPosts[postIndex] = post;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts: addMainPosts,\r\n      //   addCommentLoading: false,\r\n      //   addCommentDone: true,\r\n      // };\r\n      case ADD_COMMENT_FAILURE:\r\n        draft.addCommentLoading = false;\r\n        draft.addCommentError = action.error;\r\n        break;\r\n      //   return {\r\n      //   ...state,\r\n      //   addCommentLoading: false,\r\n      //   addCommentError: action.error,\r\n      // };\r\n\r\n      case REMOVE_POST_REQUEST:\r\n        draft.removePostLoading = true;\r\n        draft.removePostDone = false;\r\n        draft.removePostError = null;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   removePostLoading: true,\r\n      //   removePostDone: false,\r\n      //   removePostError: null,\r\n      // };\r\n      case REMOVE_POST_SUCCESS:\r\n        draft.mainPosts = draft.mainPosts.filter((v) => v.id !== action.data);\r\n        draft.removePostLoading = false;\r\n        draft.removePostDone = true;\r\n        break;\r\n      // return {\r\n      //   ...state,\r\n      //   mainPosts: state.mainPosts.filter((v) => v.id !== action.data),\r\n      //   removePostLoading: false,\r\n      //   removePostDone: true,\r\n      // };\r\n      case REMOVE_POST_FAILURE:\r\n        draft.removePostLoading = false;\r\n        draft.removePostError = action.error;\r\n      // return {\r\n      //   ...state,\r\n      //   addPostLoading: false,\r\n      //   addPostError: action.error,\r\n      // };\r\n      default:\r\n        break;\r\n      // return state;\r\n    }\r\n  });\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}