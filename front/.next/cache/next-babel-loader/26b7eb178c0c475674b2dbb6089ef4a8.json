{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(rootSaga);\n\nimport { all, fork } from \"redux-saga/effects\";\nimport axios from \"axios\";\nimport postSaga from \"./post\";\nimport userSaga from \"./user\";\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return all([fork(postSaga), fork(userSaga)]);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked);\n} // all : 매개변수로서 배열을 받고, 배열안의 원소들을 한번에 실행시켜줌\n// fork : 비동기 함수를 실행시켜줌 / 서버에서의 결과값을 기다리지 않고 그대로 실행함\n// call : 동기 함수를 실행시켜줌 / 서버에서의 결과값을 기다림 await과 같은 효과\n// put : dispatch와 같은 역할, 액션을 디스패치해줌\n// take : (1회용) 매개변수의 액션이 실행될 때 까지 기다리겠다는 것\n//  1. while take : 동기적으로 동작\n//  2. takeEvery : 비동기적으로 동작\n// takeLatest : 실수로 여러번 발생된 액션을 마지막 액션 1번으로 취급해주는 것\n//              3개의 액션을 서버로 요청하면 서버로부터 응답을 1개로 줄여주는 것이지, 요청까지 1개로 줄여주진 않음 => 서버에 3개의 액션 기록이 남음\n//              => 서버쪽 검사가 필요함 (이미 등록한 액션이기 때문에 등록되지 않습니다. 와 같은 메세지를 안내함)\n//              위의 문제를 해결해준 것이 \"throttle\" 지정한 시간당 한번밖에 요청을 할 수 없도록 제한을 둠\n//  ex) 3번의 액션발생하였을 때 앞의 2번의 액션이 이미 완료된 것이면 적용되고\n//      2번의 액션이 완료되지 않고 마지막 액션과 같이 액션이 발생된 것이라면 앞의 2개의 액션은 적용안됨\n// throttling / debouncing의 차이\n// https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/sagas/index.js"],"names":["rootSaga","all","fork","axios","postSaga","userSaga"],"mappings":";;oDAMyBA,Q;;AANzB,SAASC,GAAT,EAAcC,IAAd,QAA0B,oBAA1B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,OAAOC,QAAP,MAAqB,QAArB;AACA,OAAOC,QAAP,MAAqB,QAArB;AAEA,eAAe,SAAUL,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACE,QAAD,CAAL,EAAiBF,IAAI,CAACG,QAAD,CAArB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { all, fork } from \"redux-saga/effects\";\r\nimport axios from \"axios\";\r\n\r\nimport postSaga from \"./post\";\r\nimport userSaga from \"./user\";\r\n\r\nexport default function* rootSaga() {\r\n  yield all([fork(postSaga), fork(userSaga)]);\r\n}\r\n\r\n// all : 매개변수로서 배열을 받고, 배열안의 원소들을 한번에 실행시켜줌\r\n// fork : 비동기 함수를 실행시켜줌 / 서버에서의 결과값을 기다리지 않고 그대로 실행함\r\n// call : 동기 함수를 실행시켜줌 / 서버에서의 결과값을 기다림 await과 같은 효과\r\n// put : dispatch와 같은 역할, 액션을 디스패치해줌\r\n// take : (1회용) 매개변수의 액션이 실행될 때 까지 기다리겠다는 것\r\n//  1. while take : 동기적으로 동작\r\n//  2. takeEvery : 비동기적으로 동작\r\n// takeLatest : 실수로 여러번 발생된 액션을 마지막 액션 1번으로 취급해주는 것\r\n//              3개의 액션을 서버로 요청하면 서버로부터 응답을 1개로 줄여주는 것이지, 요청까지 1개로 줄여주진 않음 => 서버에 3개의 액션 기록이 남음\r\n//              => 서버쪽 검사가 필요함 (이미 등록한 액션이기 때문에 등록되지 않습니다. 와 같은 메세지를 안내함)\r\n//              위의 문제를 해결해준 것이 \"throttle\" 지정한 시간당 한번밖에 요청을 할 수 없도록 제한을 둠\r\n//  ex) 3번의 액션발생하였을 때 앞의 2번의 액션이 이미 완료된 것이면 적용되고\r\n//      2번의 액션이 완료되지 않고 마지막 액션과 같이 액션이 발생된 것이라면 앞의 2개의 액션은 적용안됨\r\n// throttling / debouncing의 차이\r\n// https://www.zerocho.com/category/JavaScript/post/59a8e9cb15ac0000182794fa\r\n"]},"metadata":{},"sourceType":"module"}