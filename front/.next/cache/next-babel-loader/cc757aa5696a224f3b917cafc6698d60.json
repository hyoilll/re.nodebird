{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport shortId from \"shortid\"; // npm i shortid, 항상 새로운 아이디를 생성해줌\n\nexport const initialState = {\n  mainPosts: [{\n    id: 1,\n    User: {\n      id: 1,\n      nickname: \"Hyoilzzz\"\n    },\n    content: \"첫번째 게시글 #hyoil #zzz#bbb\",\n    Images: [{\n      id: shortId.generate(),\n      src: \"https://placeimg.com/64/64/1\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://placeimg.com/64/64/2\"\n    }, {\n      id: shortId.generate(),\n      src: \"https://placeimg.com/64/64/3\"\n    }],\n    Comments: [{\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"nero\"\n      },\n      content: \"개정판이 나왔네요.\"\n    }, {\n      id: shortId.generate(),\n      User: {\n        id: shortId.generate(),\n        nickname: \"hero\"\n      },\n      content: \"얼른 사고 싶어요.\"\n    }]\n  }],\n  imagePaths: [],\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n}; // --- 상수화\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\"; // ---\n\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst dummyPost = data => {\n  return {\n    id: data.id,\n    content: data.content,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    },\n    Images: [],\n    Comments: []\n  };\n};\n\nconst dummyComment = data => {\n  return {\n    id: shortId.generate(),\n    // npm i shortid, 항상 새로운 아이디를 생성해줌\n    content: data,\n    User: {\n      id: 1,\n      nickname: \"hyoil\"\n    }\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      console.log(\"ADD_POST_REQUEST\");\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: true,\n        addPostDone: false,\n        addPostError: null\n      });\n\n    case ADD_POST_SUCCESS:\n      console.log(\"ADD_POST_SUCCESS\", action.type, action.data);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: [dummyPost(action.data), ...state.mainPosts],\n        // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\n        addPostLoading: false,\n        addPostDone: true // const a = [1, 2, 3, 4]\n        // const b = [5, ...a]\n        // b => [5, 1, 2, 3, 4]};\n\n      });\n\n    case ADD_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: true,\n        addCommentDone: false,\n        addCommentError: null\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      // action : {content: commentText, postId: post.id, userId: id}\n      const addPostIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\n\n      const post = _objectSpread({}, state.mainPosts[addPostIndex]);\n\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\n      const addMainPosts = [...state.mainPosts];\n      addMainPosts[addPostIndex] = post;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: addMainPosts,\n        addCommentLoading: false,\n        addCommentDone: true // const a = [1, 2, 3, 4]\n        // const b = [5, ...a]\n        // b => [5, 1, 2, 3, 4]};\n\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addCommentLoading: false,\n        addCommentError: action.error\n      });\n\n    case REMOVE_POST_REQUEST:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        removePostLoading: true,\n        removePostDone: false,\n        removePostError: null\n      });\n\n    case REMOVE_POST_SUCCESS:\n      const removePostIndex = state.mainPosts.findIndex(v => v.id === action.data);\n      const removeMainPosts = [...state.mainPosts];\n      removeMainPosts.splice(removePostIndex, 1);\n      return _objectSpread(_objectSpread({}, state), {}, {\n        mainPosts: removeMainPosts,\n        removePostLoading: false,\n        removePostDone: true // const a = [1, 2, 3, 4]\n        // const b = [5, ...a]\n        // b => [5, 1, 2, 3, 4]};\n\n      });\n\n    case REMOVE_POST_FAILURE:\n      return _objectSpread(_objectSpread({}, state), {}, {\n        addPostLoading: false,\n        addPostError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/reducers/post.js"],"names":["shortId","initialState","mainPosts","id","User","nickname","content","Images","generate","src","Comments","imagePaths","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addPost","data","type","addComment","dummyPost","dummyComment","reducer","state","action","console","log","error","addPostIndex","findIndex","v","postId","post","addMainPosts","removePostIndex","removeMainPosts","splice"],"mappings":";;;;;;AAAA,OAAOA,OAAP,MAAoB,SAApB,C,CAA+B;;AAE/B,OAAO,MAAMC,YAAY,GAAG;AAC1BC,EAAAA,SAAS,EAAE,CACT;AACEC,IAAAA,EAAE,EAAE,CADN;AAEEC,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAFR;AAMEC,IAAAA,OAAO,EAAE,yBANX;AAOEC,IAAAA,MAAM,EAAE,CACN;AAAEJ,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KADM,EAEN;AAAEN,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAFM,EAGN;AAAEN,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EAAN;AAA0BC,MAAAA,GAAG,EAAE;AAA/B,KAHM,CAPV;AAYEC,IAAAA,QAAQ,EAAE,CACR;AACEP,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KADQ,EASR;AACEH,MAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADN;AAEEJ,MAAAA,IAAI,EAAE;AACJD,QAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADA;AAEJH,QAAAA,QAAQ,EAAE;AAFN,OAFR;AAMEC,MAAAA,OAAO,EAAE;AANX,KATQ;AAZZ,GADS,CADe;AAkC1BK,EAAAA,UAAU,EAAE,EAlCc;AAmC1BC,EAAAA,cAAc,EAAE,KAnCU;AAoC1BC,EAAAA,WAAW,EAAE,KApCa;AAqC1BC,EAAAA,YAAY,EAAE,IArCY;AAsC1BC,EAAAA,iBAAiB,EAAE,KAtCO;AAuC1BC,EAAAA,cAAc,EAAE,KAvCU;AAwC1BC,EAAAA,eAAe,EAAE,IAxCS;AAyC1BC,EAAAA,iBAAiB,EAAE,KAzCO;AA0C1BC,EAAAA,cAAc,EAAE,KA1CU;AA2C1BC,EAAAA,eAAe,EAAE;AA3CS,CAArB,C,CA8CP;;AACA,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AACP,OAAO,MAAMC,gBAAgB,GAAG,kBAAzB;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CACP;;AAEA,OAAO,MAAMC,OAAO,GAAIC,IAAD,KAAW;AAChCC,EAAAA,IAAI,EAAEX,gBAD0B;AAEhCU,EAAAA;AAFgC,CAAX,CAAhB;AAKP,OAAO,MAAME,UAAU,GAAIF,IAAD,KAAW;AACnCC,EAAAA,IAAI,EAAEL,mBAD6B;AAEnCI,EAAAA;AAFmC,CAAX,CAAnB;;AAKP,MAAMG,SAAS,GAAIH,IAAD,IAAU;AAC1B,SAAO;AACL5B,IAAAA,EAAE,EAAE4B,IAAI,CAAC5B,EADJ;AAELG,IAAAA,OAAO,EAAEyB,IAAI,CAACzB,OAFT;AAGLF,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN,KAHD;AAOLE,IAAAA,MAAM,EAAE,EAPH;AAQLG,IAAAA,QAAQ,EAAE;AARL,GAAP;AAUD,CAXD;;AAYA,MAAMyB,YAAY,GAAIJ,IAAD,IAAU;AAC7B,SAAO;AACL5B,IAAAA,EAAE,EAAEH,OAAO,CAACQ,QAAR,EADC;AACmB;AACxBF,IAAAA,OAAO,EAAEyB,IAFJ;AAGL3B,IAAAA,IAAI,EAAE;AACJD,MAAAA,EAAE,EAAE,CADA;AAEJE,MAAAA,QAAQ,EAAE;AAFN;AAHD,GAAP;AAQD,CATD;;AAWA,MAAM+B,OAAO,GAAG,CAACC,KAAK,GAAGpC,YAAT,EAAuBqC,MAAvB,KAAkC;AAChD,UAAQA,MAAM,CAACN,IAAf;AACE,SAAKX,gBAAL;AACEkB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,6CACKH,KADL;AAEEzB,QAAAA,cAAc,EAAE,IAFlB;AAGEC,QAAAA,WAAW,EAAE,KAHf;AAIEC,QAAAA,YAAY,EAAE;AAJhB;;AAMF,SAAKQ,gBAAL;AACEiB,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCF,MAAM,CAACN,IAAvC,EAA6CM,MAAM,CAACP,IAApD;AACA,6CACKM,KADL;AAEEnC,QAAAA,SAAS,EAAE,CAACgC,SAAS,CAACI,MAAM,CAACP,IAAR,CAAV,EAAyB,GAAGM,KAAK,CAACnC,SAAlC,CAFb;AAE2D;AACzDU,QAAAA,cAAc,EAAE,KAHlB;AAIEC,QAAAA,WAAW,EAAE,IAJf,CAKE;AACA;AACA;;AAPF;;AASF,SAAKU,gBAAL;AACE,6CACKc,KADL;AAEEzB,QAAAA,cAAc,EAAE,KAFlB;AAGEE,QAAAA,YAAY,EAAEwB,MAAM,CAACG;AAHvB;;AAMF,SAAKd,mBAAL;AACE,6CACKU,KADL;AAEEnB,QAAAA,iBAAiB,EAAE,IAFrB;AAGEC,QAAAA,cAAc,EAAE,KAHlB;AAIEC,QAAAA,eAAe,EAAE;AAJnB;;AAMF,SAAKQ,mBAAL;AACE;AACA,YAAMc,YAAY,GAAGL,KAAK,CAACnC,SAAN,CAAgByC,SAAhB,CAClBC,CAAD,IAAOA,CAAC,CAACzC,EAAF,KAASmC,MAAM,CAACP,IAAP,CAAYc,MADT,CAArB;;AAGA,YAAMC,IAAI,qBAAQT,KAAK,CAACnC,SAAN,CAAgBwC,YAAhB,CAAR,CAAV;;AACAI,MAAAA,IAAI,CAACpC,QAAL,GAAgB,CAACyB,YAAY,CAACG,MAAM,CAACP,IAAP,CAAYzB,OAAb,CAAb,EAAoC,GAAGwC,IAAI,CAACpC,QAA5C,CAAhB;AACA,YAAMqC,YAAY,GAAG,CAAC,GAAGV,KAAK,CAACnC,SAAV,CAArB;AACA6C,MAAAA,YAAY,CAACL,YAAD,CAAZ,GAA6BI,IAA7B;AACA,6CACKT,KADL;AAEEnC,QAAAA,SAAS,EAAE6C,YAFb;AAGE7B,QAAAA,iBAAiB,EAAE,KAHrB;AAIEC,QAAAA,cAAc,EAAE,IAJlB,CAKE;AACA;AACA;;AAPF;;AASF,SAAKU,mBAAL;AACE,6CACKQ,KADL;AAEEnB,QAAAA,iBAAiB,EAAE,KAFrB;AAGEE,QAAAA,eAAe,EAAEkB,MAAM,CAACG;AAH1B;;AAMF,SAAKjB,mBAAL;AACE,6CACKa,KADL;AAEEtB,QAAAA,iBAAiB,EAAE,IAFrB;AAGEC,QAAAA,cAAc,EAAE,KAHlB;AAIEC,QAAAA,eAAe,EAAE;AAJnB;;AAMF,SAAKQ,mBAAL;AACE,YAAMuB,eAAe,GAAGX,KAAK,CAACnC,SAAN,CAAgByC,SAAhB,CACrBC,CAAD,IAAOA,CAAC,CAACzC,EAAF,KAASmC,MAAM,CAACP,IADD,CAAxB;AAGA,YAAMkB,eAAe,GAAG,CAAC,GAAGZ,KAAK,CAACnC,SAAV,CAAxB;AACA+C,MAAAA,eAAe,CAACC,MAAhB,CAAuBF,eAAvB,EAAwC,CAAxC;AACA,6CACKX,KADL;AAEEnC,QAAAA,SAAS,EAAE+C,eAFb;AAGElC,QAAAA,iBAAiB,EAAE,KAHrB;AAIEC,QAAAA,cAAc,EAAE,IAJlB,CAKE;AACA;AACA;;AAPF;;AASF,SAAKU,mBAAL;AACE,6CACKW,KADL;AAEEzB,QAAAA,cAAc,EAAE,KAFlB;AAGEE,QAAAA,YAAY,EAAEwB,MAAM,CAACG;AAHvB;;AAKF;AACE,aAAOJ,KAAP;AAxFJ;AA0FD,CA3FD;;AA6FA,eAAeD,OAAf","sourcesContent":["import shortId from \"shortid\"; // npm i shortid, 항상 새로운 아이디를 생성해줌\r\n\r\nexport const initialState = {\r\n  mainPosts: [\r\n    {\r\n      id: 1,\r\n      User: {\r\n        id: 1,\r\n        nickname: \"Hyoilzzz\",\r\n      },\r\n      content: \"첫번째 게시글 #hyoil #zzz#bbb\",\r\n      Images: [\r\n        { id: shortId.generate(), src: \"https://placeimg.com/64/64/1\" },\r\n        { id: shortId.generate(), src: \"https://placeimg.com/64/64/2\" },\r\n        { id: shortId.generate(), src: \"https://placeimg.com/64/64/3\" },\r\n      ],\r\n      Comments: [\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"nero\",\r\n          },\r\n          content: \"개정판이 나왔네요.\",\r\n        },\r\n        {\r\n          id: shortId.generate(),\r\n          User: {\r\n            id: shortId.generate(),\r\n            nickname: \"hero\",\r\n          },\r\n          content: \"얼른 사고 싶어요.\",\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n  imagePaths: [],\r\n  addPostLoading: false,\r\n  addPostDone: false,\r\n  addPostError: null,\r\n  removePostLoading: false,\r\n  removePostDone: false,\r\n  removePostError: null,\r\n  addCommentLoading: false,\r\n  addCommentDone: false,\r\n  addCommentError: null,\r\n};\r\n\r\n// --- 상수화\r\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\r\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\r\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\r\n\r\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\r\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\r\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\r\n\r\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\r\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\r\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\r\n// ---\r\n\r\nexport const addPost = (data) => ({\r\n  type: ADD_POST_REQUEST,\r\n  data,\r\n});\r\n\r\nexport const addComment = (data) => ({\r\n  type: ADD_COMMENT_REQUEST,\r\n  data,\r\n});\r\n\r\nconst dummyPost = (data) => {\r\n  return {\r\n    id: data.id,\r\n    content: data.content,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n    Images: [],\r\n    Comments: [],\r\n  };\r\n};\r\nconst dummyComment = (data) => {\r\n  return {\r\n    id: shortId.generate(), // npm i shortid, 항상 새로운 아이디를 생성해줌\r\n    content: data,\r\n    User: {\r\n      id: 1,\r\n      nickname: \"hyoil\",\r\n    },\r\n  };\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ADD_POST_REQUEST:\r\n      console.log(\"ADD_POST_REQUEST\");\r\n      return {\r\n        ...state,\r\n        addPostLoading: true,\r\n        addPostDone: false,\r\n        addPostError: null,\r\n      };\r\n    case ADD_POST_SUCCESS:\r\n      console.log(\"ADD_POST_SUCCESS\", action.type, action.data);\r\n      return {\r\n        ...state,\r\n        mainPosts: [dummyPost(action.data), ...state.mainPosts], // 객체가 삽임되므로 객체를 반환하는 함수를 통해서 data를 넘겨줌\r\n        addPostLoading: false,\r\n        addPostDone: true,\r\n        // const a = [1, 2, 3, 4]\r\n        // const b = [5, ...a]\r\n        // b => [5, 1, 2, 3, 4]};\r\n      };\r\n    case ADD_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n\r\n    case ADD_COMMENT_REQUEST:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: true,\r\n        addCommentDone: false,\r\n        addCommentError: null,\r\n      };\r\n    case ADD_COMMENT_SUCCESS:\r\n      // action : {content: commentText, postId: post.id, userId: id}\r\n      const addPostIndex = state.mainPosts.findIndex(\r\n        (v) => v.id === action.data.postId\r\n      );\r\n      const post = { ...state.mainPosts[addPostIndex] };\r\n      post.Comments = [dummyComment(action.data.content), ...post.Comments];\r\n      const addMainPosts = [...state.mainPosts];\r\n      addMainPosts[addPostIndex] = post;\r\n      return {\r\n        ...state,\r\n        mainPosts: addMainPosts,\r\n        addCommentLoading: false,\r\n        addCommentDone: true,\r\n        // const a = [1, 2, 3, 4]\r\n        // const b = [5, ...a]\r\n        // b => [5, 1, 2, 3, 4]};\r\n      };\r\n    case ADD_COMMENT_FAILURE:\r\n      return {\r\n        ...state,\r\n        addCommentLoading: false,\r\n        addCommentError: action.error,\r\n      };\r\n\r\n    case REMOVE_POST_REQUEST:\r\n      return {\r\n        ...state,\r\n        removePostLoading: true,\r\n        removePostDone: false,\r\n        removePostError: null,\r\n      };\r\n    case REMOVE_POST_SUCCESS:\r\n      const removePostIndex = state.mainPosts.findIndex(\r\n        (v) => v.id === action.data\r\n      );\r\n      const removeMainPosts = [...state.mainPosts];\r\n      removeMainPosts.splice(removePostIndex, 1);\r\n      return {\r\n        ...state,\r\n        mainPosts: removeMainPosts,\r\n        removePostLoading: false,\r\n        removePostDone: true,\r\n        // const a = [1, 2, 3, 4]\r\n        // const b = [5, ...a]\r\n        // b => [5, 1, 2, 3, 4]};\r\n      };\r\n    case REMOVE_POST_FAILURE:\r\n      return {\r\n        ...state,\r\n        addPostLoading: false,\r\n        addPostError: action.error,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n"]},"metadata":{},"sourceType":"module"}