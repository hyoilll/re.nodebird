{"ast":null,"code":"import { all, delay, fork, put, takeLatest } from \"@redux-saga/core/effects\";\nimport shortid from \"shortid\";\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LOAD_POSTS_REQUEST, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS } from \"../reducers/post\";\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\n\nfunction addPostAPI(data) {\n  return axios.post(\"/api/addpost\", data);\n}\n\nfunction* addPost(action) {\n  // 아래의 ADD_POST_SUCCESS, ADD_POST_TO_ME와 같이\n  // 다른 액션을 한번에 할 수 없으므로 다중 액션으로\n  try {\n    // const result = yield call(addPostAPI, action.data);\n    yield delay(1000);\n    const id = shortid.generate();\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: {\n        id,\n        content: action.data\n      } // 성공결과가 담겨있음\n\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction removePostAPI(data) {\n  return axios.post(\"/api/removepost\", data);\n}\n\nfunction* removePost(action) {\n  try {\n    // const result = yield call(removePostAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: REMOVE_POST_SUCCESS,\n      data: action.data //post.id\n\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: action.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/api/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    // const result = yield call(addCommentAPI, action.data);\n    yield delay(1000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: action.data // { content: commentText, postId: post.id, userId: id }\n\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      data: err.response.data // 실패결과가 담겨있음\n\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPosts() {\n  yield takeLatest(LOAD_POSTS_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchAddComment), fork(watchRemovePost), fork(watchLoadPosts)]);\n}","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/sagas/post.js"],"names":["all","delay","fork","put","takeLatest","shortid","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_POST_FAILURE","ADD_POST_REQUEST","ADD_POST_SUCCESS","LOAD_POSTS_REQUEST","REMOVE_POST_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","ADD_POST_TO_ME","REMOVE_POST_OF_ME","addPostAPI","data","axios","post","addPost","action","id","generate","type","content","err","response","removePostAPI","removePost","addCommentAPI","postId","addComment","watchAddPost","watchRemovePost","watchAddComment","watchLoadPosts","postSaga"],"mappings":"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","sourcesContent":["import { all, delay, fork, put, takeLatest } from \"@redux-saga/core/effects\";\r\nimport shortid from \"shortid\";\r\nimport {\r\n  ADD_COMMENT_FAILURE,\r\n  ADD_COMMENT_REQUEST,\r\n  ADD_COMMENT_SUCCESS,\r\n  ADD_POST_FAILURE,\r\n  ADD_POST_REQUEST,\r\n  ADD_POST_SUCCESS,\r\n  LOAD_POSTS_REQUEST,\r\n  REMOVE_POST_FAILURE,\r\n  REMOVE_POST_REQUEST,\r\n  REMOVE_POST_SUCCESS,\r\n} from \"../reducers/post\";\r\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from \"../reducers/user\";\r\n\r\nfunction addPostAPI(data) {\r\n  return axios.post(\"/api/addpost\", data);\r\n}\r\n\r\nfunction* addPost(action) {\r\n  // 아래의 ADD_POST_SUCCESS, ADD_POST_TO_ME와 같이\r\n  // 다른 액션을 한번에 할 수 없으므로 다중 액션으로\r\n  try {\r\n    // const result = yield call(addPostAPI, action.data);\r\n    yield delay(1000);\r\n    const id = shortid.generate();\r\n    yield put({\r\n      type: ADD_POST_SUCCESS,\r\n      data: {\r\n        id,\r\n        content: action.data,\r\n      }, // 성공결과가 담겨있음\r\n    });\r\n    yield put({\r\n      type: ADD_POST_TO_ME,\r\n      data: id,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_POST_FAILURE,\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction removePostAPI(data) {\r\n  return axios.post(\"/api/removepost\", data);\r\n}\r\n\r\nfunction* removePost(action) {\r\n  try {\r\n    // const result = yield call(removePostAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: REMOVE_POST_SUCCESS,\r\n      data: action.data, //post.id\r\n    });\r\n    yield put({\r\n      type: REMOVE_POST_OF_ME,\r\n      data: action.data,\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: REMOVE_POST_FAILURE,\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction addCommentAPI(data) {\r\n  return axios.post(`/api/post/${data.postId}/comment`, data);\r\n}\r\n\r\nfunction* addComment(action) {\r\n  try {\r\n    // const result = yield call(addCommentAPI, action.data);\r\n    yield delay(1000);\r\n    yield put({\r\n      type: ADD_COMMENT_SUCCESS,\r\n      data: action.data, // { content: commentText, postId: post.id, userId: id }\r\n    });\r\n  } catch (err) {\r\n    yield put({\r\n      type: ADD_COMMENT_FAILURE,\r\n      data: err.response.data, // 실패결과가 담겨있음\r\n    });\r\n  }\r\n}\r\n\r\nfunction* watchAddPost() {\r\n  yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction* watchRemovePost() {\r\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\r\n}\r\n\r\nfunction* watchAddComment() {\r\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\nfunction* watchLoadPosts() {\r\n  yield takeLatest(LOAD_POSTS_REQUEST, addComment);\r\n}\r\n\r\nexport default function* postSaga() {\r\n  yield all([\r\n    fork(watchAddPost),\r\n    fork(watchAddComment),\r\n    fork(watchRemovePost),\r\n    fork(watchLoadPosts),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}