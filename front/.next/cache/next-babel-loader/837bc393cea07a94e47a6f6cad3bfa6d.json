{"ast":null,"code":"import { createWrapper } from \"next-redux-wrapper\";\nimport { createStore } from \"redux\";\n\nconst configureStore = () => {\n  const store = createStore(reducer);\n};\n\nconst wrapper = createWrapper(configureStore, {\n  debug: true\n});\nexport default wrapper; // 중앙저장소(이름:효일, 나이:29)의 데이터를 변경하기 위해서는 action이 필요함.\n// action을 dispatch하면 중앙저장소의 데이터가 바뀜\n// a컴포넌트에서 중앙저장소의 이름을 유키로 변경하면 a컴포넌트를 포함하여 중앙저장소의 데이터를 참조하고 있는 모든 컴포넌트에서 이름값이 바뀜\n// but action의 type:change_name을 자바스크립트가 그냥 알 수는 없기 때문에, reducer를 활용하여 action.type이 change_name일 경우에 어떻게 변경되는지 제시해줌\n// 단점 : 데이터를 변경하거나 할 때, action이 점점 늘어남 => reducer도 늘어남\n// 이러한 단점이 있음에도 불구하고 redux를 사용하는게, action을 기준으로 과거 history가 추적이 되기 때문에, 버그잡을 때 매우 편함","map":{"version":3,"sources":["C:/Users/dlgyd/OneDrive/문서/GitHub/re.nodebird/front/store/configureStore.js"],"names":["createWrapper","createStore","configureStore","store","reducer","wrapper","debug"],"mappings":"AAAA,SAASA,aAAT,QAA8B,oBAA9B;AACA,SAASC,WAAT,QAA4B,OAA5B;;AAEA,MAAMC,cAAc,GAAG,MAAM;AAC3B,QAAMC,KAAK,GAAGF,WAAW,CAACG,OAAD,CAAzB;AACD,CAFD;;AAIA,MAAMC,OAAO,GAAGL,aAAa,CAACE,cAAD,EAAiB;AAC5CI,EAAAA,KAAK;AADuC,CAAjB,CAA7B;AAIA,eAAeD,OAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA","sourcesContent":["import { createWrapper } from \"next-redux-wrapper\";\r\nimport { createStore } from \"redux\";\r\n\r\nconst configureStore = () => {\r\n  const store = createStore(reducer);\r\n};\r\n\r\nconst wrapper = createWrapper(configureStore, {\r\n  debug: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nexport default wrapper;\r\n\r\n// 중앙저장소(이름:효일, 나이:29)의 데이터를 변경하기 위해서는 action이 필요함.\r\n// action을 dispatch하면 중앙저장소의 데이터가 바뀜\r\n// a컴포넌트에서 중앙저장소의 이름을 유키로 변경하면 a컴포넌트를 포함하여 중앙저장소의 데이터를 참조하고 있는 모든 컴포넌트에서 이름값이 바뀜\r\n// but action의 type:change_name을 자바스크립트가 그냥 알 수는 없기 때문에, reducer를 활용하여 action.type이 change_name일 경우에 어떻게 변경되는지 제시해줌\r\n\r\n// 단점 : 데이터를 변경하거나 할 때, action이 점점 늘어남 => reducer도 늘어남\r\n// 이러한 단점이 있음에도 불구하고 redux를 사용하는게, action을 기준으로 과거 history가 추적이 되기 때문에, 버그잡을 때 매우 편함\r\n"]},"metadata":{},"sourceType":"module"}